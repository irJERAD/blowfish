[{"content":" Here are the notes I have for any of the classes I am taking I have been focusing on getting certified in the areas of software development including data analytics, data science, and iOS mobile development. Courses: # - Google Advanced Data Analytics Professional Certificate # ","date":"29 April 2023","permalink":"/notes/","section":"Class Notes","summary":"Here are the notes I have for any of the classes I am taking I have been focusing on getting certified in the areas of software development including data analytics, data science, and iOS mobile development.","title":"Class Notes"},{"content":"","date":"29 April 2023","permalink":"/series/foundations-of-data-science/","section":"Series","summary":"","title":"Foundations of Data Science"},{"content":"","date":"29 April 2023","permalink":"/tags/google-advanced-data-analytics-professional-certificate/","section":"Tags","summary":"","title":"Google Advanced Data Analytics Professional Certificate"},{"content":"","date":"29 April 2023","permalink":"/tags/guide/","section":"Tags","summary":"","title":"guide"},{"content":" ","date":"29 April 2023","permalink":"/notes/import-datasets-with-python/","section":"Class Notes","summary":" ","title":"Import Datasets with Python"},{"content":"","date":"29 April 2023","permalink":"/tags/jupyter/","section":"Tags","summary":"","title":"jupyter"},{"content":"","date":"29 April 2023","permalink":"/tags/lab/","section":"Tags","summary":"","title":"lab"},{"content":"","date":"29 April 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"python"},{"content":" ","date":"29 April 2023","permalink":"/notes/python-functions-for-the-discovery-of-a-dataset/","section":"Class Notes","summary":" ","title":"Python Functions for the Discovery of a Dataset"},{"content":"","date":"29 April 2023","permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"Blowfish has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.\nThis area could be used to add some extra decriptive text to each taxonomy. Check out the advanced tag below to see how to take this concept even further.\n","date":"29 April 2023","permalink":"/tags/","section":"Tags","summary":"Blowfish has full support for Hugo taxonomies and will adapt to any taxonomy set up. Taxonomy listings like this one also support custom content to be displayed above the list of terms.","title":"Tags"},{"content":" ","date":"29 April 2023","permalink":"/notes/the-eda-process/","section":"Class Notes","summary":" ","title":"The Exploratory Data Analysis Process"},{"content":" Exemplar: Discover what is in your dataset # Introduction # In this activity, you will discover characteristics of a dataset and use visualizations to analyze the data. This will develop and strengthen your skills in exploratory data analysis (EDA) and your knowledge of functions that allow you to explore and visualize data.\nEDA is an essential process in a data science workflow. As a data professional, you will need to conduct this process to better understand the data at hand and determine how it can be used to solve the problem you want to address. This activity will give you an opportunity to practice that process and prepare you for EDA in future projects.\nIn this activity, you are a member of an analytics team that provides insights to an investing firm. To help them decide which companies to invest in next, the firm wants insights into unicorn companies–companies that are valued at over one billion dollars. The data you will use for this task provides information on over 1,000 unicorn companies, including their industry, country, year founded, and select investors. You will use this information to gain insights into how and when companies reach this prestigious milestone and to make recommentations for next steps to the investing firm.\nStep 1: Imports # Import libraries and packages # First, import the relevant Python libraries and modules. Use the pandas library and the matplotlib.pyplot module.\n# Import libraries and packages ### YOUR CODE HERE ### import pandas as pd import matplotlib.pyplot as plt Load the dataset into a DataFrame # The dataset provided is in the form of a csv file named Unicorn_Companies.csv and contains a subset of data on unicorn companies. Load the data from the csv file into a DataFrame and save it in a variable.\n# Load data from the csv file into a DataFrame and save in a variable ### YOUR CODE HERE ### companies = pd.read_csv(\u0026#34;Unicorn_Companies.csv\u0026#34;) Hint 1 Refer to what you learned about loading data in Python.\nHint 2 Use the function in the pandas library that allows you to read data from a csv file and load the data into a DataFrame.\nHint 3 Use the read_csv() function from the pandas library.\nStep 2: Data exploration # Display the first 10 rows of the data # Next, explore the dataset and answer questions to guide your exploration and analysis of the data. To begin, display the first 10 rows of the data to get an understanding of how the dataset is structured.\n# Display the first 10 rows of the data ### YOUR CODE HERE ### companies.head(10) Company Valuation Date Joined Industry City Country/Region Continent Year Founded Funding Select Investors 0 Bytedance $180B 4/7/17 Artificial intelligence Beijing China Asia 2012 $8B Sequoia Capital China, SIG Asia Investments, S... 1 SpaceX $100B 12/1/12 Other Hawthorne United States North America 2002 $7B Founders Fund, Draper Fisher Jurvetson, Rothen... 2 SHEIN $100B 7/3/18 E-commerce \u0026amp; direct-to-consumer Shenzhen China Asia 2008 $2B Tiger Global Management, Sequoia Capital China... 3 Stripe $95B 1/23/14 Fintech San Francisco United States North America 2010 $2B Khosla Ventures, LowercaseCapital, capitalG 4 Klarna $46B 12/12/11 Fintech Stockholm Sweden Europe 2005 $4B Institutional Venture Partners, Sequoia Capita... 5 Canva $40B 1/8/18 Internet software \u0026amp; services Surry Hills Australia Oceania 2012 $572M Sequoia Capital China, Blackbird Ventures, Mat... 6 Checkout.com $40B 5/2/19 Fintech London United Kingdom Europe 2012 $2B Tiger Global Management, Insight Partners, DST... 7 Instacart $39B 12/30/14 Supply chain, logistics, \u0026amp; delivery San Francisco United States North America 2012 $3B Khosla Ventures, Kleiner Perkins Caufield \u0026amp; By... 8 JUUL Labs $38B 12/20/17 Consumer \u0026amp; retail San Francisco United States North America 2015 $14B Tiger Global Management 9 Databricks $38B 2/5/19 Data management \u0026amp; analytics San Francisco United States North America 2013 $3B Andreessen Horowitz, New Enterprise Associates... Hint 1 Refer to the content about exploratory data analysis in Python.\nHint 2 Use the function in the pandas library that allows you to get a specific number of rows from the top of a DataFrame.\nHint 3 Use the head() function from the pandas library.\nQuestion: What do you think the \u0026ldquo;Date Joined\u0026rdquo; column represents?\nThe \u0026ldquo;Date Joined\u0026rdquo; column represents when the company became a \u0026ldquo;unicorn,\u0026rdquo; reaching one billion dollars in valuation. Question: What do you think the \u0026ldquo;Select Investors\u0026rdquo; column represents?\nThe \u0026ldquo;Select Investors\u0026rdquo; column represents the top investors in the company. Assess the size of the dataset # Get a sense of how large the dataset is. The size property that DataFrames have can help.\n# How large the dataset is ### YOUR CODE HERE ### companies.size 10740 Question: What do you notice about the size of the dataset?\nThe size of the dataset is 10740. This means that there are 10740 values in total across the whole dataset. Determine the shape of the dataset # Identify the number of rows and columns in the dataset. The shape property that DataFrames have can help.\n# Shape of the dataset ### YOUR CODE HERE ### companies.shape (1074, 10) Question: What do you notice about the shape of the dataset?\nThe shape of the dataset is (1074, 10). The first number, 1074, represents the number of rows (also known as entries). The second number, 10, represents the number of columns. According to this dataset, there are 1074 unicorn companies as of March 2022, and this dataset also shows 10 aspects of each company. Get basic information about the dataset # To further understand what the dataset entails, get basic information about the dataset, including the data type of values in each column. There is more than one way to approach this task. In this instance, use the info() function from pandas.\n# Get information ### YOUR CODE HERE ### companies.info() \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; RangeIndex: 1074 entries, 0 to 1073 Data columns (total 10 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Company 1074 non-null object 1 Valuation 1074 non-null object 2 Date Joined 1074 non-null object 3 Industry 1074 non-null object 4 City 1058 non-null object 5 Country/Region 1074 non-null object 6 Continent 1074 non-null object 7 Year Founded 1074 non-null int64 8 Funding 1074 non-null object 9 Select Investors 1073 non-null object dtypes: int64(1), object(9) memory usage: 84.0+ KB Question: What do you notice about the type of data in the Year Founded column? Refer to the output from using info() above. Knowing the data type of this variable is helpful because it indicates what types of analysis can be done with that variable, how it can be aggregated with other variables, and so on.\nDtype is listed as int64 in the Year Founded column. This means that the year a company was founded is represented as an integer. Question: What do you notice about the type of data in the Date Joined column? Refer to the output from using info() above. Knowing the data type of this variable is helpful because it indicates what types of analysis can be done with that variable and how the variable can be transformed to suit specific tasks.\nDtype is listed as object for the Date Joined column. This means that the date a company became a unicorn is represented as an object. Step 3: Statistical tests # Find descriptive statistics # Find descriptive statistics and structure your dataset. The describe() function from the pandas library can help. This function generates statistics for the numeric columns in a dataset.\n### Get descriptive statistics ### YOUR CODE HERE ### companies.describe() Year Founded count 1074.000000 mean 2012.895717 std 5.698573 min 1919.000000 25% 2011.000000 50% 2014.000000 75% 2016.000000 max 2021.000000 Question: Based on the table of descriptive stats generated above, what do you notice about the minimum value in the Year Founded column? This is important to know because it helps you understand how early the entries in the data begin.\nThe minimum value in the Year Founded column is 1919. This means that this dataset does not contain data on unicorn companies founded before 1919. Question: What do you notice about the maximum value in the Year Founded column? This is important to know because it helps you understand the most recent year captured by the data.\nThe maximum value in the Year Founded column is 2021. This means that this dataset does not include data on unicorn companies founded after 2021. Convert the Date Joined column to datetime # Use pd.to_datetime() to convert the \u0026ldquo;Date Joined\u0026rdquo; column to datetime. Update the column with the converted values. Use .info() to confirm that the update actually took place You can use the to_datetime() function from the pandas library. This splits each value into year, month, and date components. This is an important step in data cleaning, as it makes the data in this column easier to use in tasks you may encounter. To name a few examples, you may need to compare \u0026ldquo;date joined\u0026rdquo; between companies or determine how long it took a company to become a unicorn. Having \u0026ldquo;date joined\u0026rdquo; in datetime form would help you complete such tasks.\n# Step 1. Use pd.to_datetime() to convert Date Joined column to datetime # Step 2. Update the column with the converted values ### YOUR CODE HERE ### companies[\u0026#34;Date Joined\u0026#34;] = pd.to_datetime(companies[\u0026#34;Date Joined\u0026#34;]) # Use .info() to confirm that the update actually took place ### YOUR CODE HERE ### companies.info() \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; RangeIndex: 1074 entries, 0 to 1073 Data columns (total 10 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Company 1074 non-null object 1 Valuation 1074 non-null object 2 Date Joined 1074 non-null datetime64[ns] 3 Industry 1074 non-null object 4 City 1058 non-null object 5 Country/Region 1074 non-null object 6 Continent 1074 non-null object 7 Year Founded 1074 non-null int64 8 Funding 1074 non-null object 9 Select Investors 1073 non-null object dtypes: datetime64[ns](1), int64(1), object(8) memory usage: 84.0+ KB Create a Year Joined column # It is common to encounter situations where you will need to compare the year joined with the year founded. The Date Joined column does not just have year—it has the year, month, and date. Extract the year component from the Date Joined column and add those year components into a new column to keep track of each company\u0026rsquo;s year joined.\n# Step 1: Use .dt.year to extract year component from Date Joined column # Step 2: Add the result as a new column named Year Joined to the DataFrame ### YOUR CODE HERE ### companies[\u0026#34;Year Joined\u0026#34;] = companies[\u0026#34;Date Joined\u0026#34;].dt.year # Use .head() to confirm that the new column did get added ### YOUR CODE HERE ### companies.head() Company Valuation Date Joined Industry City Country/Region Continent Year Founded Funding Select Investors Year Joined 0 Bytedance $180B 2017-04-07 Artificial intelligence Beijing China Asia 2012 $8B Sequoia Capital China, SIG Asia Investments, S... 2017 1 SpaceX $100B 2012-12-01 Other Hawthorne United States North America 2002 $7B Founders Fund, Draper Fisher Jurvetson, Rothen... 2012 2 SHEIN $100B 2018-07-03 E-commerce \u0026amp; direct-to-consumer Shenzhen China Asia 2008 $2B Tiger Global Management, Sequoia Capital China... 2018 3 Stripe $95B 2014-01-23 Fintech San Francisco United States North America 2010 $2B Khosla Ventures, LowercaseCapital, capitalG 2014 4 Klarna $46B 2011-12-12 Fintech Stockholm Sweden Europe 2005 $4B Institutional Venture Partners, Sequoia Capita... 2011 Step 4: Results and evaluation # Take a sample of the data # It is not necessary to take a sample of the data in order to conduct the visualizations and EDA that follow. But you may encounter scenarios in the future where you will need to take a sample of the data due to time and resource limitations. For the purpose of developing your skills around sampling, take a sample of the data and work with that sample for the next steps of analysis you want to conduct. Use the sample() function for this task.\n# Step 1: Use sample() with the n parameter set to 50 to randomly sample 50 unicorn companies from the data. # Specify the random_state parameter so that if you run this cell multiple times, you get the same sample each time. # Step 2: Save the result in a new variable. ### YOUR CODE HERE ### companies_sample = companies.sample(n = 50, random_state = 42) Visualize the time it took companies to reach unicorn status # Visualize the longest time it took companies to reach unicorn status for each industry represented in the sample. To create a bar plot to visualize this, use the bar() function from the matplotlib.pyplot module.\n# Create bar plot # with Industry column as the categories of the bars # and the difference in years between Year Joined column and Year Founded column as the heights of the bars ### YOUR CODE HERE ### plt.bar(companies_sample[\u0026#34;Industry\u0026#34;], companies_sample[\u0026#34;Year Joined\u0026#34;] - companies_sample[\u0026#34;Year Founded\u0026#34;]) # Set title ### YOUR CODE HERE ### plt.title(\u0026#34;Bar plot of maximum years taken by company to become unicorn per industry (from sample)\u0026#34;) # Set x-axis label ### YOUR CODE HERE ### plt.xlabel(\u0026#34;Industry\u0026#34;) # Set y-axis label ### YOUR CODE HERE ### plt.ylabel(\u0026#34;Maximum number of years\u0026#34;) # Rotate labels on the x-axis as a way to avoid overlap in the positions of the text ### YOUR CODE HERE ### plt.xticks(rotation=45, horizontalalignment=\u0026#39;right\u0026#39;) # Display the plot ### YOUR CODE HERE ### plt.show() Hint 1 Refer to what you have learned about creating bar plots as part of exploratory data analysis.\nHint 2 Use the function in the matplotlib.pyplot module that allows you to create a bar plot, specifying the category and height for each bar.\nUse the functions in the matplotlib.pyplot module that allow you to set the title, x-axis label, and y-axis label of plots. In that module, there are also functions for rotating the labels on the x-axis and displaying the plot.\nHint 3 Use the plt.bar() to create the bar plot, passing in the categories and heights of the bars.\nUse plt.title(), plt.xlabel(), and plt.ylabel() to set the title, x-axis label, and y-axis label, respectively.\nUse plt.xticks() to rotate labels on the x-axis of a plot. The parameters rotation=45, horizontalalignment='right' can be passed in to rotate the labels by 45 degrees and align the labels to the right.\nUse plt.show() to display a plot.\nQuestion: What do you observe from this bar plot?\nThis bar plot shows that for this sample of unicorn companies, the largest value for maximum time taken to become a unicorn occurred in the Heath and Fintech industries, while the smallest value occurred in the Consumer \u0026amp; Retail industry. Visualize the maximum unicorn company valuation per industry # Visualize unicorn companies\u0026rsquo; maximum valuation for each industry represented in the sample. To create a bar plot to visualize this, use the bar() function from the matplotlib.pyplot module. Before plotting, create a new column that represents the companies\u0026rsquo; valuations as numbers (instead of strings, as they\u0026rsquo;re currently represented). Then, use this new column to plot your data.\n# Create a column representing company valuation as numeric data # Create new column companies_sample[\u0026#39;valuation_billions\u0026#39;] = companies_sample[\u0026#39;Valuation\u0026#39;] # Remove the \u0026#39;$\u0026#39; from each value companies_sample[\u0026#39;valuation_billions\u0026#39;] = companies_sample[\u0026#39;valuation_billions\u0026#39;].str.replace(\u0026#39;$\u0026#39;, \u0026#39;\u0026#39;) # Remove the \u0026#39;B\u0026#39; from each value companies_sample[\u0026#39;valuation_billions\u0026#39;] = companies_sample[\u0026#39;valuation_billions\u0026#39;].str.replace(\u0026#39;B\u0026#39;, \u0026#39;\u0026#39;) # Convert column to type int companies_sample[\u0026#39;valuation_billions\u0026#39;] = companies_sample[\u0026#39;valuation_billions\u0026#39;].astype(\u0026#39;int\u0026#39;) companies_sample.head() Company Valuation Date Joined Industry City Country/Region Continent Year Founded Funding Select Investors Year Joined valuation_billions 542 Aiven $2B 2021-10-18 Internet software \u0026amp; services Helsinki Finland Europe 2016 $210M Institutional Venture Partners, Atomico, Early... 2021 2 370 Jusfoun Big Data $2B 2018-07-09 Data management \u0026amp; analytics Beijing China Asia 2010 $137M Boxin Capital, DT Capital Partners, IDG Capital 2018 2 307 Innovaccer $3B 2021-02-19 Health San Francisco United States North America 2014 $379M M12, WestBridge Capital, Lightspeed Venture Pa... 2021 3 493 Algolia $2B 2021-07-28 Internet software \u0026amp; services San Francisco United States North America 2012 $334M Accel, Alven Capital, Storm Ventures 2021 2 350 SouChe Holdings $3B 2017-11-01 E-commerce \u0026amp; direct-to-consumer Hangzhou China Asia 2012 $1B Morningside Ventures, Warburg Pincus, CreditEa... 2017 3 # Create bar plot # with Industry column as the categories of the bars # and new valuation column as the heights of the bars ### YOUR CODE HERE ### plt.bar(companies_sample[\u0026#34;Industry\u0026#34;], companies_sample[\u0026#34;valuation_billions\u0026#34;]) # Set title ### YOUR CODE HERE ### plt.title(\u0026#34;Bar plot of maximum unicorn company valuation per industry (from sample)\u0026#34;) # Set x-axis label ### YOUR CODE HERE ### plt.xlabel(\u0026#34;Industry\u0026#34;) # Set y-axis label ### YOUR CODE HERE ### plt.ylabel(\u0026#34;Maximum valuation in billions of dollars\u0026#34;) # Rotate labels on the x-axis as a way to avoid overlap in the positions of the text ### YOUR CODE HERE ### plt.xticks(rotation=45, horizontalalignment=\u0026#39;right\u0026#39;) # Display the plot ### YOUR CODE HERE ### plt.show() Hint 1 Refer to what you have learned about creating bar plots as part of exploratory data analysis.\nHint 2 Use the function in the matplotlib.pyplot module that allows you to create a bar plot, specifying the category and height for each bar.\nUse the functions in the matplotlib.pyplot module that allow you to set the title, x-axis label, and y-axis label of plots. In that module, there are also functions for rotating the labels on the x-axis and displaying the plot.\nHint 3 You can use the plt.bar() to create the bar plot, passing in the categories and heights of the bars.\nYou can use plt.title(), plt.xlabel(), and plt.ylabel() to set the title, x-axis label, and y-axis label, respectively.\nYou can use plt.xticks() to rotate labels on the x-axis of a plot. The parameters rotation=45, horizontalalignment='right' can be passed in to rotate the labels by 45 degrees and align the labels to the right.\nYou can use plt.show() to display a plot.\nQuestion: What do you observe from this bar plot?\nThis bar plot shows that for this sample of unicorn companies, the highest maximum valuation occurred in the Artificial Intelligence industry, while the lowest maximum valuation occurred in the Cybersecurity industry. Considerations # What are some key takeaways that you learned from this lab?\nFunctions in the pandas library can be used to gather characteristics about the data at hand. The info() and describe() functions were especially useful for gathering basic information about a dataset and finding descriptive statistics, respectively. Functions in the matplotlib.pyplot module can be used to create visualizations to further understand specific aspects of the data. The bar() function allowed you to create bar plots that helped visualize categorical information about the data. You were able to visualize the maximum years to become a unicorn and maximum valuation for each industry represented in the sample taken from the data. What findings would you share with others?\nThere are 1074 unicorn companies represented in this dataset. Some companies took longer to reach unicorn status but have accrued high valuation as of March 2022. Companies could take longer to hit unicorn status for a number of reasons, including requiring more funding or taking longer to develop a business model. What recommendations would you share with stakeholders based on these findings?\nIt may be helpful to focus more on industry specifics. Next steps to consider:\nIdentify the main industries that the investing firm is interested in investing in. Select a subset of this data that includes only companies in those industries. Analyze that subset more closely. Determine which companies have higher valuation but do not have as many investors currently. They may be good candidates to consider investing in. References\nBhat, M.A. (2022, March). Unicorn Companies.\n","date":"29 April 2023","permalink":"/notes/unicorn-dataset-discovery/","section":"Class Notes","summary":"Exemplar: Discover what is in your dataset # Introduction # In this activity, you will discover characteristics of a dataset and use visualizations to analyze the data. This will develop and strengthen your skills in exploratory data analysis (EDA) and your knowledge of functions that allow you to explore and visualize data.","title":"Unicorn Dataset Discovery"},{"content":" Who am I? # As an adventurer I love to sail, surf, and when I can\u0026rsquo;t hit the ocean I\u0026rsquo;ll take my surfskate for a cruise. As an explorer I have lived up and down Califonia\u0026rsquo;s coast - San Diego, Santa Barbara, San Francisco - as well as the South Pacific Island of Tahiti and New Zealand. As a life long learner I am in pursuit of my next certification or digging around the corners of a favorite pastime.\nData or information, knowledge, and the value they can perform is the economy I work in. Building interactive dashboards for real-time action oriented decision making. The crawling, the collecting, the exploring, mutating and munging, working intimately with data to reveal true value and insights.\nI work with young students in their mid-teens as a tutor. A growth mindset and the power of \u0026lsquo;Yet\u0026rsquo; are core to my program. Inspiring in students an ownership of their academics. I mentor them to become self-guided learners. Teaching them to meditate on a love for learning and devote themselves to an appreciation of their educational opportunity.\nEducation # University of California San Diego (UCSD)\nB.S. Cognitive Science | 2013 M.n. Applied Mathematics | 2013 ","date":"29 April 2023","permalink":"/","section":"Welcome to my digital abode 👋","summary":"Who am I? # As an adventurer I love to sail, surf, and when I can\u0026rsquo;t hit the ocean I\u0026rsquo;ll take my surfskate for a cruise. As an explorer I have lived up and down Califonia\u0026rsquo;s coast - San Diego, Santa Barbara, San Francisco - as well as the South Pacific Island of Tahiti and New Zealand.","title":"Welcome to my digital abode 👋"},{"content":" Automatidata project # Course 2 - Get Started with Python\nCourse 2 end-of-course project: Inspect and analyze data # In this activity, you will examine data provided and prepare it for analysis.\nThe purpose of this project is to investigate and understand the data provided.\nThe goal is to use a dataframe contructed within Python, perform a cursory inspection of the provided dataset and inform team members of your findings. This activity has three parts:\nPart 1: Understand the situation\nHow can you best prepare to understand and organize the provided taxi cab information? Part 2: Understand the data\nCreate a pandas dataframe for data learning, and future exploratory data analysis (EDA) and statistical activities.\nView and interpret the datasets data table\nSort and interpret the data table for two variables of your choice.\nPart 3: Understand the variables\nWhat is the min, mean, and max of your chosen variables?\nVisualize the variables\nFollow the instructions and answer the following questions to complete the activity. Then, you will complete an Executive Summary using the questions listed on the PACE Strategy Document. Be sure to complete this activity before moving on. The next course item will provide you with a completed exemplar to compare to your own work.\nIdentify data types and relevant variables using Python # Exercise Instructions: # Complete the following step-by-step instructions to inspect and analyze this NYC taxi dataset.\nThis activity will help ensure the information is:\nReady to answer questions and yield insights\nReady for visualizations\nReady for future hypothesis testing and statistical methods\nFollow the instructions and answer questions to complete this activity. Afterward,\nWrite a short Executive Summary using your findings.\nUse the structured notebook provided to help you in this project. Please complete the questions inside and prepare a summary for the data team.\nConsider the questions presented in the Course 2 PACE strategy document.\nCompare your data insights with the provided exemplar to confirm of your approach and results.\nThroughout these project notebooks, you\u0026rsquo;ll see references to the problem-solving framework PACE. The following notebook components are labeled with the respective PACE stage: Plan, Analyze, Construct, and Execute.\nPACE: Plan # Step 1a. Understand the situation # How can you best prepare to understand and organize the provided taxi cab information? Begin by exploring your dataset and consider reviewing the Data Dictionary.\n### **==\u0026gt; EXEMPLAR CODE and OUTPUT** # # Question 1: How best to prepare? # # Q1 Answer: # By reading the taxi cab data fields and ensuring I understand how # each one impacts the dataset. Reviewing the fact sheet could also # provide helpful background information. # However, my primary goal is to get the data into Python, inspect it, # and provide DeShawn with my initial observations. # Afterwards, I can learn more deeply about the data and check # for any anomalies. Step 1b. Import dataframe # Create a pandas dataframe for data learning, and future exploratory data analysis (EDA) and statistical activities.\nCode the following,\nimport pandas as pd #library exercise for buidling dataframes\nimport numpy as np #numpy is imported with pandas\nimport matplotlib.pyplot as plt #visualization library\nimport seaborn as sns #visualization library\ndf = pd.read_csv(\u0026lsquo;2017_Yellow_Taxi_Trip_Data.csv\u0026rsquo;)\nNote: pair the data object name \u0026ldquo;df\u0026rdquo; with pandas functions to manipulate data, such as df.groupby().\n# ==\u0026gt; EXEMPLAR CODE and OUTPUT import pandas as pd #library exercise for buidling dataframes import numpy as np #numpy is imported with pandas import matplotlib.pyplot as plt #visualization library import seaborn as sns #visualization library df = pd.read_csv(\u0026#39;2017_Yellow_Taxi_Trip_Data.csv\u0026#39;) print(\u0026#34;done\u0026#34;) done PACE: Analyze # Step 2a. Understand the data - Interpret the data table # View and interpret the datasets data table by coding the following:\ndf.head(10) df.info() Consider the following two questions:\nQuestion 1: When reviewing the df.head(10) output, are there any data points that surprise you or are not correct?\nQuestion 2: When reviewing the df.info() output, what kind of data types are we working with?\n# ==\u0026gt; EXEMPLAR CODE and OUTPUT df.head(10) Unnamed: 0 VendorID tpep_pickup_datetime tpep_dropoff_datetime passenger_count trip_distance RatecodeID store_and_fwd_flag PULocationID DOLocationID payment_type fare_amount extra mta_tax tip_amount tolls_amount improvement_surcharge total_amount 0 24870114 2 03/25/2017 8:55:43 AM 03/25/2017 9:09:47 AM 6 3.34 1 N 100 231 1 13.0 0.0 0.5 2.76 0.0 0.3 16.56 1 35634249 1 04/11/2017 2:53:28 PM 04/11/2017 3:19:58 PM 1 1.80 1 N 186 43 1 16.0 0.0 0.5 4.00 0.0 0.3 20.80 2 106203690 1 12/15/2017 7:26:56 AM 12/15/2017 7:34:08 AM 1 1.00 1 N 262 236 1 6.5 0.0 0.5 1.45 0.0 0.3 8.75 3 38942136 2 05/07/2017 1:17:59 PM 05/07/2017 1:48:14 PM 1 3.70 1 N 188 97 1 20.5 0.0 0.5 6.39 0.0 0.3 27.69 4 30841670 2 04/15/2017 11:32:20 PM 04/15/2017 11:49:03 PM 1 4.37 1 N 4 112 2 16.5 0.5 0.5 0.00 0.0 0.3 17.80 5 23345809 2 03/25/2017 8:34:11 PM 03/25/2017 8:42:11 PM 6 2.30 1 N 161 236 1 9.0 0.5 0.5 2.06 0.0 0.3 12.36 6 37660487 2 05/03/2017 7:04:09 PM 05/03/2017 8:03:47 PM 1 12.83 1 N 79 241 1 47.5 1.0 0.5 9.86 0.0 0.3 59.16 7 69059411 2 08/15/2017 5:41:06 PM 08/15/2017 6:03:05 PM 1 2.98 1 N 237 114 1 16.0 1.0 0.5 1.78 0.0 0.3 19.58 8 8433159 2 02/04/2017 4:17:07 PM 02/04/2017 4:29:14 PM 1 1.20 1 N 234 249 2 9.0 0.0 0.5 0.00 0.0 0.3 9.80 9 95294817 1 11/10/2017 3:20:29 PM 11/10/2017 3:40:55 PM 1 1.60 1 N 239 237 1 13.0 0.0 0.5 2.75 0.0 0.3 16.55 # ==\u0026gt; EXEMPLAR CODE and OUTPUT df.info() \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; RangeIndex: 22699 entries, 0 to 22698 Data columns (total 18 columns): # Column Non-Null Count Dtype --- ------ -------------- ----- 0 Unnamed: 0 22699 non-null int64 1 VendorID 22699 non-null int64 2 tpep_pickup_datetime 22699 non-null object 3 tpep_dropoff_datetime 22699 non-null object 4 passenger_count 22699 non-null int64 5 trip_distance 22699 non-null float64 6 RatecodeID 22699 non-null int64 7 store_and_fwd_flag 22699 non-null object 8 PULocationID 22699 non-null int64 9 DOLocationID 22699 non-null int64 10 payment_type 22699 non-null int64 11 fare_amount 22699 non-null float64 12 extra 22699 non-null float64 13 mta_tax 22699 non-null float64 14 tip_amount 22699 non-null float64 15 tolls_amount 22699 non-null float64 16 improvement_surcharge 22699 non-null float64 17 total_amount 22699 non-null float64 dtypes: float64(8), int64(7), object(3) memory usage: 3.1+ MB Step 2b. Understand the data - Sort by variables # Sort and interpret the data table for two variables of your choice.\nAnswer the following three questions:\nQuestion 1: Sort your first variable (trip_distance) from maximum to minimum value, do the values seem normal?\nQuestion 2: Sort your by your second variable (total_amount), are any values unusual?\nQuestion 3: Are the resulting rows similar for both sorts? Why or why not?\n# ==\u0026gt; EXEMPLAR CODE and OUTPUT df_sort = df.sort_values(by=[\u0026#39;trip_distance\u0026#39;],ascending=False) df_sort.head(10) Unnamed: 0 VendorID tpep_pickup_datetime tpep_dropoff_datetime passenger_count trip_distance RatecodeID store_and_fwd_flag PULocationID DOLocationID payment_type fare_amount extra mta_tax tip_amount tolls_amount improvement_surcharge total_amount 9280 51810714 2 06/18/2017 11:33:25 PM 06/19/2017 12:12:38 AM 2 33.96 5 N 132 265 2 150.00 0.0 0.0 0.00 0.00 0.3 150.30 13861 40523668 2 05/19/2017 8:20:21 AM 05/19/2017 9:20:30 AM 1 33.92 5 N 229 265 1 200.01 0.0 0.5 51.64 5.76 0.3 258.21 6064 49894023 2 06/13/2017 12:30:22 PM 06/13/2017 1:37:51 PM 1 32.72 3 N 138 1 1 107.00 0.0 0.0 55.50 16.26 0.3 179.06 10291 76319330 2 09/11/2017 11:41:04 AM 09/11/2017 12:18:58 PM 1 31.95 4 N 138 265 2 131.00 0.0 0.5 0.00 0.00 0.3 131.80 29 94052446 2 11/06/2017 8:30:50 PM 11/07/2017 12:00:00 AM 1 30.83 1 N 132 23 1 80.00 0.5 0.5 18.56 11.52 0.3 111.38 18130 90375786 1 10/26/2017 2:45:01 PM 10/26/2017 4:12:49 PM 1 30.50 1 N 132 220 1 90.50 0.0 0.5 19.85 8.16 0.3 119.31 5792 68023798 2 08/11/2017 2:14:01 PM 08/11/2017 3:17:31 PM 1 30.33 2 N 132 158 1 52.00 0.0 0.5 14.64 5.76 0.3 73.20 15350 77309977 2 09/14/2017 1:44:44 PM 09/14/2017 2:34:29 PM 1 28.23 2 N 13 132 1 52.00 0.0 0.5 4.40 5.76 0.3 62.96 10302 43431843 1 05/15/2017 8:11:34 AM 05/15/2017 9:03:16 AM 1 28.20 2 N 90 132 1 52.00 0.0 0.5 11.71 5.76 0.3 70.27 2592 51094874 2 06/16/2017 6:51:20 PM 06/16/2017 7:41:42 PM 1 27.97 2 N 261 132 2 52.00 4.5 0.5 0.00 5.76 0.3 63.06 # ==\u0026gt; EXEMPLAR CODE and OUTPUT df_sort = df.sort_values(by=[\u0026#39;total_amount\u0026#39;],ascending=False) df_sort.head(10) Unnamed: 0 VendorID tpep_pickup_datetime tpep_dropoff_datetime passenger_count trip_distance RatecodeID store_and_fwd_flag PULocationID DOLocationID payment_type fare_amount extra mta_tax tip_amount tolls_amount improvement_surcharge total_amount 8476 11157412 1 02/06/2017 5:50:10 AM 02/06/2017 5:51:08 AM 1 2.60 5 N 226 226 1 999.99 0.0 0.0 200.00 0.00 0.3 1200.29 20312 107558404 2 12/19/2017 9:40:46 AM 12/19/2017 9:40:55 AM 2 0.00 5 N 265 265 2 450.00 0.0 0.0 0.00 0.00 0.3 450.30 13861 40523668 2 05/19/2017 8:20:21 AM 05/19/2017 9:20:30 AM 1 33.92 5 N 229 265 1 200.01 0.0 0.5 51.64 5.76 0.3 258.21 12511 107108848 2 12/17/2017 6:24:24 PM 12/17/2017 6:24:42 PM 1 0.00 5 N 265 265 1 175.00 0.0 0.0 46.69 11.75 0.3 233.74 15474 55538852 2 06/06/2017 8:55:01 PM 06/06/2017 8:55:06 PM 1 0.00 5 N 265 265 1 200.00 0.0 0.5 11.00 0.00 0.3 211.80 6064 49894023 2 06/13/2017 12:30:22 PM 06/13/2017 1:37:51 PM 1 32.72 3 N 138 1 1 107.00 0.0 0.0 55.50 16.26 0.3 179.06 16379 101198443 2 11/30/2017 10:41:11 AM 11/30/2017 11:31:45 AM 1 25.50 5 N 132 265 2 140.00 0.0 0.5 0.00 16.26 0.3 157.06 3582 111653084 1 01/01/2017 11:53:01 PM 01/01/2017 11:53:42 PM 1 7.30 5 N 1 1 1 152.00 0.0 0.0 0.00 0.00 0.3 152.30 11269 51920669 1 06/19/2017 12:51:17 AM 06/19/2017 12:52:12 AM 2 0.00 5 N 265 265 1 120.00 0.0 0.0 20.00 11.52 0.3 151.82 9280 51810714 2 06/18/2017 11:33:25 PM 06/19/2017 12:12:38 AM 2 33.96 5 N 132 265 2 150.00 0.0 0.0 0.00 0.00 0.3 150.30 Exemplar response: The two outputs in the table show different rows of data. A reason for this observation might be because there are trips that have a shorter distance, yet higher total amount (total ride fare).\nStep 2c. Understand the data - Use df.describe() # Instructions: Using pandas df.describe(), what is the min, mean, and max of your chosen variables?\nCode and perform the following:\ndf.describe()\nQuestion 1: What is the min, mean, and max of your first variable?\nQuestion 2: What is the min, mean, and max of second variable?\nQuestion 3: Are the values easily readable? Would could be done to make them more easily readable?\n# ==\u0026gt; EXEMPLAR CODE and OUTPUT df.describe() #Question 1: what is the min, mean and max of your first variable ? #Answer: Min Mean Max #total_amount -120.30 16.31 1200.29 #Question 2: what is the min, mean, and max of your second variable? #Answer: Min Mean Max #trip_distance 0 2.91 33.96 Unnamed: 0 VendorID passenger_count trip_distance RatecodeID PULocationID DOLocationID payment_type fare_amount extra mta_tax tip_amount tolls_amount improvement_surcharge total_amount count 2.269900e+04 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 22699.000000 mean 5.675849e+07 1.556236 1.642319 2.913313 1.043394 162.412353 161.527997 1.336887 13.026629 0.333275 0.497445 1.835781 0.312542 0.299551 16.310502 std 3.274493e+07 0.496838 1.285231 3.653171 0.708391 66.633373 70.139691 0.496211 13.243791 0.463097 0.039465 2.800626 1.399212 0.015673 16.097295 min 1.212700e+04 1.000000 0.000000 0.000000 1.000000 1.000000 1.000000 1.000000 -120.000000 -1.000000 -0.500000 0.000000 0.000000 -0.300000 -120.300000 25% 2.852056e+07 1.000000 1.000000 0.990000 1.000000 114.000000 112.000000 1.000000 6.500000 0.000000 0.500000 0.000000 0.000000 0.300000 8.750000 50% 5.673150e+07 2.000000 1.000000 1.610000 1.000000 162.000000 162.000000 1.000000 9.500000 0.000000 0.500000 1.350000 0.000000 0.300000 11.800000 75% 8.537452e+07 2.000000 2.000000 3.060000 1.000000 233.000000 233.000000 2.000000 14.500000 0.500000 0.500000 2.450000 0.000000 0.300000 17.800000 max 1.134863e+08 2.000000 6.000000 33.960000 99.000000 265.000000 265.000000 4.000000 999.990000 4.500000 0.500000 200.000000 19.100000 0.300000 1200.290000 PACE: Construct # Step 3a. Visualize you variables # Instructions: Create a histogram for each of the two variables. Act and reflect on the following steps:\nHistogram of your first variable (total_amount)\nHistogram of your second variable (trip_distance)\nAre your variables numerical (did the code work)?\n# ==\u0026gt; EXEMPLAR CODE and OUTPUT plt.figure(figsize=(8,6)) plt.xticks(fontsize=14); plt.yticks(fontsize=14) df = df.sort_values(by=\u0026#39;total_amount\u0026#39;) plt.hist(df[\u0026#39;total_amount\u0026#39;],bins=[0,20,40,60,80,100]) plt.title(\u0026#39;Histogram of Total Amount\u0026#39;,fontsize=20) plt.xticks(fontsize=15); plt.yticks(fontsize=15) plt.xlabel(\u0026#39;$ amount bin\u0026#39;,fontsize=20) plt.ylabel(\u0026#39;Count\u0026#39;, fontsize=20) Text(0, 0.5, 'Count') # ==\u0026gt; EXEMPLAR CODE and OUTPUT plt.figure(figsize=(8,6)) #plt.xticks(fontsize=14); plt.yticks(fontsize=14) df = df.sort_values(by=\u0026#39;trip_distance\u0026#39;) plt.hist(df[\u0026#39;trip_distance\u0026#39;],bins=[0,5,10,20,25]) plt.title(\u0026#39;Histogram of Trip Distance\u0026#39;,fontsize=20) plt.xticks(fontsize=15); plt.yticks(fontsize=15) plt.xlabel(\u0026#39;Trip distance bin\u0026#39;,fontsize=20) plt.ylabel(\u0026#39;Count\u0026#39;, fontsize=20) Text(0, 0.5, 'Count') PACE: Execute # Given your efforts, what can you summarize for DeShawn? # Note for Learners: Your answer should address Luana\u0026rsquo;s request for a summary that covers the following points:\nA summary of the data type of each variable\nAny relevant and irrelevant columns\nThe minimum, mean, and max for the two most relevant variables\nA summary of the data visualization\n","date":"27 April 2023","permalink":"/notes/automatidata-project-lab/","section":"Class Notes","summary":"Automatidata project # Course 2 - Get Started with Python\nCourse 2 end-of-course project: Inspect and analyze data # In this activity, you will examine data provided and prepare it for analysis.","title":"Automatidata Project Lab"},{"content":" Discovering # Throughout the following exercises, you will implement discovering skills on a dataset. Before starting on this programming exercise, we strongly recommend watching the video lecture and completing the IVQ for the associated topics.\nAll the information you need for solving this assignment is in this notebook, and all the code you will be implementing will take place within this notebook.\nAs we move forward, you can find instructions on how to install required libraries as they arise in this notebook. Before we begin with the exercises and analyzing the data, we need to import all libraries and extensions required for this programming exercise. Throughout the course, we will be using pandas, numpy, datetime, for operations, and matplotlib, pyplot and seaborn for plotting.\nObjective # First, we will use pandas to examine 2018 lightning strike data collected by the National Oceanic and Atmospheric Administration (NOAA). Then, we will calculate the total number of strikes for each month, and plot this information on a bar graph.\nBegin with importing the following packages and libraries:\nimport pandas as pd import numpy as np import datetime import matplotlib.pyplot as plt # Read in the 2018 lightning strike dataset df = pd.read_csv(\u0026#39;eda_using_basic_data_functions_in_python_dataset1.csv\u0026#39;) # Inspect the first 10 rows df.head(10) date number_of_strikes center_point_geom 0 2018-01-03 194 POINT(-75 27) 1 2018-01-03 41 POINT(-78.4 29) 2 2018-01-03 33 POINT(-73.9 27) 3 2018-01-03 38 POINT(-73.8 27) 4 2018-01-03 92 POINT(-79 28) 5 2018-01-03 119 POINT(-78 28) 6 2018-01-03 35 POINT(-79.3 28) 7 2018-01-03 60 POINT(-79.1 28) 8 2018-01-03 41 POINT(-78.7 28) 9 2018-01-03 119 POINT(-78.6 28) Notice that the data is structured as one row per day along with the geometric location of the strike.\nA quick way to see how many rows and columns of data we have in total is to use df.shape. The information will be output as: ([rows], [columns]).\ndf.shape (3401012, 3) The total number of rows is 3,401,012 and there are three columns.\n# Get more information about the data, including data types of each column df.info() \u0026lt;class 'pandas.core.frame.DataFrame'\u0026gt; RangeIndex: 3401012 entries, 0 to 3401011 Data columns (total 3 columns): # Column Dtype --- ------ ----- 0 date object 1 number_of_strikes int64 2 center_point_geom object dtypes: int64(1), object(2) memory usage: 77.8+ MB info will give us the total number of rows (3,401,012) and columns (3). It will also tell us the names and data types of each column, as well as the size of the dataframe in memory.\nIn this case, notice that the date column is an \u0026lsquo;object\u0026rsquo; type rather than a \u0026lsquo;date\u0026rsquo; type. Objects are strings. When dates are encoded as strings, they cannot be manipulated as easily. Converting string dates to datetime will enable us to work with them much more easily.\nLet\u0026rsquo;s convert to datetime using the pandas function to_datetime().\n# Convert date column to datetime df[\u0026#39;date\u0026#39;]= pd.to_datetime(df[\u0026#39;date\u0026#39;]) As part of discovering, we want to get an idea of the highest data points. For this dataset, we can calculate the top 10 days of 2018 with the most number of lightning stikes using the groupby(), sum(), and sort_values() functions from pandas.\nWhen we use groupby() on the date column, the function combines all rows with the same date into a single row.\nThen, using sum() will perform a sum calculation on all other summable columns. In this case, we\u0026rsquo;re summing all the lightning strikes that happened on each day. Notice that the center_point_geom column is not included in the output. That\u0026rsquo;s because, as a string object, this column is not summable.\nFinally, sort_values() returns the results in descending order of total strikes for each day in our data.\n# Calculate days with most lightning strikes df.groupby([\u0026#39;date\u0026#39;]).sum().sort_values(\u0026#39;number_of_strikes\u0026#39;, ascending=False).head(10) number_of_strikes date 2018-08-29 1070457 2018-08-17 969774 2018-08-28 917199 2018-08-27 824589 2018-08-30 802170 2018-08-19 786225 2018-08-18 741180 2018-08-16 734475 2018-08-31 723624 2018-08-15 673455 As a word of caution, you\u0026rsquo;ll find that a common mistake among data professionals is using count() instead of sum(), and vice versa. In our case, count() would return the number of occurrences of each date in the dataset, which is not what we want.\nNext, let\u0026rsquo;s extract the month data from the date column and add that extracted month data into a new column called month. This is why converting the date column to datetime is very useful. dt.month extracts just the month information (as a numeric value) from our date.\n# Create a new `month` column df[\u0026#39;month\u0026#39;] = df[\u0026#39;date\u0026#39;].dt.month df.head() date number_of_strikes center_point_geom month 0 2018-01-03 194 POINT(-75 27) 1 1 2018-01-03 41 POINT(-78.4 29) 1 2 2018-01-03 33 POINT(-73.9 27) 1 3 2018-01-03 38 POINT(-73.8 27) 1 4 2018-01-03 92 POINT(-79 28) 1 Now we can sort our values by most strikes per month. We\u0026rsquo;ll use groupby(), sum() and sort_values() from pandas again.\n# Calculate total number of strikes per month df.groupby([\u0026#39;month\u0026#39;]).sum().sort_values(\u0026#39;number_of_strikes\u0026#39;, ascending=False).head(12) number_of_strikes month 8 15525255 7 8320400 6 6445083 5 4166726 9 3018336 2 2071315 4 1524339 10 1093962 1 860045 3 854168 11 409263 12 312097 To help us read the data more easily, we\u0026rsquo;ll convert the month number to text using the datetime function dt.month_name() and add this as a new column in the dataframe. str.slice will omit the text after the first 3 letters.\n# Create a new `month_txt` column df[\u0026#39;month_txt\u0026#39;] = df[\u0026#39;date\u0026#39;].dt.month_name().str.slice(stop=3) df.head() date number_of_strikes center_point_geom month month_txt 0 2018-01-03 194 POINT(-75 27) 1 Jan 1 2018-01-03 41 POINT(-78.4 29) 1 Jan 2 2018-01-03 33 POINT(-73.9 27) 1 Jan 3 2018-01-03 38 POINT(-73.8 27) 1 Jan 4 2018-01-03 92 POINT(-79 28) 1 Jan Our objective is to plot the total number of strikes per month as a bar graph. To help us with the plotting, we\u0026rsquo;ll create a new dataframe called df_by_month. This will allow us to easily access the month, month text, and total number of strikes for each month.\n# Create new helper dataframe for plotting df_by_month = df.groupby([\u0026#39;month\u0026#39;,\u0026#39;month_txt\u0026#39;]).sum().sort_values(\u0026#39;month\u0026#39;, ascending=True).head(12).reset_index() df_by_month month month_txt number_of_strikes 0 1 Jan 860045 1 2 Feb 2071315 2 3 Mar 854168 3 4 Apr 1524339 4 5 May 4166726 5 6 Jun 6445083 6 7 Jul 8320400 7 8 Aug 15525255 8 9 Sep 3018336 9 10 Oct 1093962 10 11 Nov 409263 11 12 Dec 312097 Now we\u0026rsquo;ll make our bar chart. Pyplot\u0026rsquo;s plt.bar() function takes positional arguments of x and height, representing the data used for the x- and y- axes, respectively. We want the x-axis to represent months, and the y-axis to represent strike count.\nplt.bar(x=df_by_month[\u0026#39;month_txt\u0026#39;],height= df_by_month[\u0026#39;number_of_strikes\u0026#39;], label=\u0026#34;Number of strikes\u0026#34;) plt.plot() plt.xlabel(\u0026#34;Months(2018)\u0026#34;) plt.ylabel(\u0026#34;Number of lightning strikes\u0026#34;) plt.title(\u0026#34;Number of lightning strikes in 2018 by months\u0026#34;) plt.legend() plt.show() If you have successfully completed the material above, congratulations! You have some of the fundamental elements of data discovery that you can apply to your own datasets.\n","date":"27 April 2023","permalink":"/notes/eda-using-basic-data-functions-with-python/","section":"Class Notes","summary":"Discovering # Throughout the following exercises, you will implement discovering skills on a dataset. Before starting on this programming exercise, we strongly recommend watching the video lecture and completing the IVQ for the associated topics.","title":"Exploratory Data Analysis Using Basic Data Functions with Python"},{"content":" ","date":"26 April 2023","permalink":"/notes/automatidata-executive-summary/","section":"Class Notes","summary":" ","title":"Automatidata Executive Summary"},{"content":" ","date":"26 April 2023","permalink":"/notes/atuomatidata-wildfire-prediction-preliminary-summary/","section":"Class Notes","summary":" ","title":"Automatidata Preliminary Summary"},{"content":" ","date":"26 April 2023","permalink":"/notes/automatidata-project-proposal/","section":"Class Notes","summary":" ","title":"Automatidata Project Proposal"},{"content":" ","date":"26 April 2023","permalink":"/notes/course1-terms-and-definitions/","section":"Class Notes","summary":" ","title":"Course 1 Terms and Definitions"},{"content":" ","date":"26 April 2023","permalink":"/notes/course2-terms-and-definitions-copy/","section":"Class Notes","summary":" ","title":"Course 1 Terms and Definitions"},{"content":"","date":"26 April 2023","permalink":"/tags/definitions/","section":"Tags","summary":"","title":"definitions"},{"content":" ","date":"26 April 2023","permalink":"/notes/pace-strategy-document/","section":"Class Notes","summary":" ","title":"PACE Strategy Document"},{"content":"","date":"26 April 2023","permalink":"/tags/planning/","section":"Tags","summary":"","title":"planning"},{"content":"","date":"26 April 2023","permalink":"/tags/proposal/","section":"Tags","summary":"","title":"proposal"},{"content":"","date":"26 April 2023","permalink":"/tags/strategy/","section":"Tags","summary":"","title":"strategy"},{"content":"","date":"25 April 2023","permalink":"/tags/family/","section":"Tags","summary":"","title":"family"},{"content":"","date":"25 April 2023","permalink":"/tags/health/","section":"Tags","summary":"","title":"health"},{"content":"","date":"25 April 2023","permalink":"/tags/mom/","section":"Tags","summary":"","title":"mom"},{"content":"","date":"25 April 2023","permalink":"/tags/positivity/","section":"Tags","summary":"","title":"positivity"},{"content":"","date":"25 April 2023","permalink":"/tags/surf/","section":"Tags","summary":"","title":"surf"},{"content":" A north county San Diego local grom moves to Tahiti for some south pacific bliss. Here is my collection of surf related content.\n","date":"25 April 2023","permalink":"/surf/","section":"Surf","summary":"A north county San Diego local grom moves to Tahiti for some south pacific bliss. Here is my collection of surf related content.","title":"Surf"},{"content":" In looking back at why it is I surf I have found interesting motivation to keep committed to this life-long pastime. Before I was born my mother always knew she wanted to get to a place called Cardiff By The Sea. There she would raise her children at the beach surfing, skating, and soaking up the sun. Inspired by the lifestyle introduced to her by her uncle Jeff Timpone and his friend Shawn Stussy - legendary surfboard shaper and surf apparel entrepreneur, respectively - my mother would catch the bus, surfboard in hand, and ride for hours to get to Huntington beach to surf with the up-and-coming crew back then.\nWanting to raise a family of her own in such a open-minded and ocean-centered culture became her dream. Finally, in 1991 she took the jump and brought my sister and I to Cardiff By The Sea - from what I could tell, an entire town of people who wanted to raise a family in that same way.\nMy mom waisted no time in getting me into the ocean. The same month we moved to North County San Diego, I found myself thrust into the waves. I was gripping onto a board as though I was holding on for dear life as my mom would hurl me into a mountain of water crashing and tumbling in every which way.\nThis did not excite or interest me in the way my mother had hoped. I would spend the next few years jumping between sports. Running without direction on the soccer field, day dreaming in right field while playing baseball, sitting on the bench or talking with the cheer leaders while a football player, and somewhat finding myself on the basketball court. Each time my mom was right there. Assistant coach, snack bar sales casher, car pool liaison, whatever the team needed a single mother and provider for two somehow always had time to invest in my extracurricular activities.\nIt was not until the summer before junior high school that I would return to the board. That summer, during orientation, I had met a new kid that moved from Colorado. We both shared an interest in skateboarding and he expressed a desire to learn how to surf. That summer I would ride my skateboard while holding a 7 foot surfboard two and a half miles each way. Hanz, my new friend from Colorado, and I would surf for a couple hours before riding our skateboards home. This would become the beginning of my life long affair with surfing.\nWhen school kicked off I was pumped to find out surfing was a school sponsored sport. And just as always, mom was there. Being the son of the assistant coach came with all sorts of perks. A personal relationship with the surf coach and school history teacher being chief among them. Now, every Thursday was more than just practice with the surf team, it was family night. My sister would meet me at the house and mom would have our boards packed up ready for us to hit the beach.\nTeam practice was at a place called pipes near our town camp grounds. For one week every year my sister, along with our mom and step dad, would move out of the home we lived in together and pitch a tent at the local camp grounds. For one week, and during school since this was the ideal swell time for the reef breaks there, we would be living at the beach! This meant we got to wake up, surf, go to school, then surf again after we finished class.\nMy second year in junior high school we almost didn\u0026rsquo;t have a surf team. The long time coach needed some time off and wanted to take a break. Luckily, my mom was there again to step up and fulfill whatever it was my pursuits in life required. And this year, my passion for surfing required a coach for my junior high school surf team. We didn\u0026rsquo;t win any prestigious awards that year, but I did get to surf in every competition. I also had my pick of the swag that would come in from local companies offering to sponsor our team. At the time I felt a little guilty over the nepotism. Looking back however, all the hours my mother had to put in, the challenges she volunteered to handle, and the operation she ran on behalf of a litter of spoiled little So Cal groms earned her authority enough to do as she pleased with our team and its resources. And if giving me a special sweater from a local company who sponsored us would lite up a small for weeks on my face, then she was completely within her rights to do so.\nMore recently I have come back to surfing again. It is possible one of the greatest gifts my mother has afforded me. The wisdom she had in those early years of her life, instilling in her a dream of raising a family born of the ocean and living for waves, carried us through much. In fact, if you were to plot the amount of surfing I was doing, on average, over any given period of time, you would see a powerful correlation to positive outcomes in my life.\nI am only now realizing this as I write. The times that surfing was in my life were some of the healthiest and most growth oriented periods I have had. When I started, that summer before junior high, I went from almost being held back a grade in 6th grade to becoming an honors students by 7th grade. In high school, when I surfed most, I became the ideal first generation college student. An honors and AP student for the first 3 years while I was surfing. It was not until I stopped surfing my final year of high school that I did not follow through with going directly to college.\nAnd here I measure myself again. This last year, as I started surfing and feeling a renewed passion for it, I appear to have surmounted my greatest obstacles yet. I have come out of a multi year slump to find a career in my life-long passion of teaching. More recently, as I became the digital strategist for the Christian Surfers of Tahiti and really started to surf, I was promoted to a management position where I reside now facilitating other tutors in achieving success with their students.\nAs I look forward I have so much to be thankful for, as I always have. But now, after writing this reminiscent piece, I have someone I need to reach out to and share these exciting findings. Because I am sure they will want to be right there enjoying this wave with me.\n","date":"25 April 2023","permalink":"/surf/why-we-surf/","section":"Surf","summary":"In looking back at why it is I surf I have found interesting motivation to keep committed to this life-long pastime.","title":"Why We Surf"},{"content":"","date":"7 November 2022","permalink":"/examples/blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite"},{"content":" See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.\n","date":"7 November 2022","permalink":"/examples/","section":"Showcase","summary":"See what\u0026rsquo;s possible with Blowfish. This section contains links to example templates and pages created using Blowfish to get you inspired.","title":"Showcase"},{"content":"","date":"6 November 2022","permalink":"/examples/blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist"},{"content":"","date":"6 November 2022","permalink":"/examples/blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey"},{"content":"","date":"12 October 2022","permalink":"/tags/authors/","section":"Tags","summary":"","title":"authors"},{"content":"A quick example of how to start using author taxonomies in your articles.\n","date":"12 October 2022","permalink":"/authors/","section":"Authors Taxonomy Listing Example","summary":"A quick example of how to start using author taxonomies in your articles.","title":"Authors Taxonomy Listing Example"},{"content":"Dummy Second Author\u0026rsquo;s awesome dummy bio.\n","date":"12 October 2022","permalink":"/authors/secondauthor/","section":"Authors Taxonomy Listing Example","summary":"Dummy Second Author\u0026rsquo;s awesome dummy bio.","title":"Dummy Second Author"},{"content":"This is an example of how an article with multiple authors will look like.\n","date":"12 October 2022","permalink":"/samples/multiple-authors/","section":"Samples","summary":"A quick example of how multiple authors could be used.","title":"Multiple Authors"},{"content":"Nuno\u0026rsquo;s awesome dummy bio.\n","date":"12 October 2022","permalink":"/authors/nunocoracao/","section":"Authors Taxonomy Listing Example","summary":"Nuno\u0026rsquo;s awesome dummy bio.","title":"Nuno Coração"},{"content":"","date":"12 October 2022","permalink":"/tags/sample/","section":"Tags","summary":"","title":"sample"},{"content":" Blowfish brings your content to life. 😍 This section contains some demo pages that show how Blowfish renders different types of content. You can also see an example taxonomy listing page.\nSidenote: This page is just a standard Blowfish article listing and Hugo has been configured to generate a samples content type and display article summaries.\n","date":"12 October 2022","permalink":"/samples/","section":"Samples","summary":"Blowfish brings your content to life. 😍 This section contains some demo pages that show how Blowfish renders different types of content. You can also see an example taxonomy listing page.","title":"Samples"},{"content":"","date":"26 September 2022","permalink":"/tags/thumbnail/","section":"Tags","summary":"","title":"thumbnail"},{"content":"A quick example of how to start using Thumbnails in your articles.\nIf your average directory for an article looks like this:\ncontent └── awesome_article.md You need to change it from a single markdown file into a folder. Create a directory with the same name of the article, inside create a index.md file. You\u0026rsquo;ll get a structure similar to what\u0026rsquo;s below.\ncontent └── awesome_article └── featured.png Inside the article you can now add an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature*. Example below.\ncontent └── awesome_article ├── index.md └── featured.png This will tell Blowfish that this article has a feature image that can be used both as a thumbnail across your website as well as for oEmbed cards across social platforms. As an example, you can try copy pasting the URL of this article into a platform that shows oEmbeds (e.g. Twitter, WhatsApp, Telegram, etc) and see what is displayed.\n","date":"26 September 2022","permalink":"/samples/thumbnail_sample/","section":"Samples","summary":"A quick example of how to start using Thumbnails in your artciles.","title":"Thumbnails"},{"content":"","date":"13 June 2022","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"19 January 2022","permalink":"/tags/docs/","section":"Tags","summary":"","title":"docs"},{"content":"","date":"19 January 2022","permalink":"/series/documentation/","section":"Series","summary":"","title":"Documentation"},{"content":" Simple, yet powerful. Learn how to use Blowfish and its features. This section contains everything you need to know about Blowfish. If you\u0026rsquo;re new, check out the Installation guide to begin or visit the Samples section to see what Blowfish can do.\n","date":"19 January 2022","permalink":"/docs/","section":"Documentation","summary":"Simple, yet powerful. Learn how to use Blowfish and its features. This section contains everything you need to know about Blowfish. If you\u0026rsquo;re new, check out the Installation guide to begin or visit the Samples section to see what Blowfish can do.","title":"Documentation"},{"content":"","date":"19 January 2022","permalink":"/tags/new/","section":"Tags","summary":"","title":"new"},{"content":" Blowfish is packed with tons of features. The original aim of Blowfish was to develop a theme that was simple and lightweight. The theme is a fork of Congo and expands its initial vision.\nTailwind CSS 3.0 # Tailwind CSS is at the heart of Blowfish and this release contains the very latest Tailwind CSS version 3. It brings with it performance optimisations and support for some great new CSS features.\nMultilingual support # A highly requested feature, Blowfish is now multilingual! If you publish your content in multiple languages, the site will be built with all the translations available.\n🇬🇧 🇩🇪 🇫🇷 🇪🇸 🇨🇳 🇧🇷 🇹🇷 🇧🇩 Thanks to submissions from the community, Blowfish has already been translated into eight languages with more to be added over time. By the way, pull requests for new languages are always welcome!\nRTL language support # One of the benefits of the new Tailwind and Multilingual features is the ability to add RTL language support. When enabled, the entire site will reflow content from right-to-left. Every element in the theme has been restyled to ensure it looks great in this mode which aids authors who wish to generate content in RTL languages.\nRTL is controlled on a per-language basis so you can mix and match both RTL and LTR content in your projects and the theme will respond accordingly.\nAutomatic image resizing # A big change in Blowfish 2.0 is the addition of automatic image resizing. Using the power of Hugo Pipes, images in Markdown content are now automatically scaled to different output sizes. These are then presented using HTML srcset attributes enabling optimised file sizes to be served to your site visitors.\n\u0026lt;!-- Markdown: ![My image](image.jpg) --\u0026gt; \u0026lt;img srcset=\u0026#34; /image_320x0_resize_q75_box.jpg 320w, /image_635x0_resize_q75_box.jpg 635w, /image_1024x0_resize_q75_box.jpg 1024w, /image_1270x0_resize_q75_box.jpg 2x\u0026#34; src=\u0026#34;/image_635x0_resize_q75_box.jpg\u0026#34; alt=\u0026#34;My image\u0026#34; /\u0026gt; Best of all there\u0026rsquo;s nothing you need to change! Simply insert standard Markdown image syntax and let the theme do the rest. If you want a little more control, the figure shortcode has been completely rewritten to provide the same resizing benefits.\nSite search # Powered by Fuse.js, site search allows visitors to quickly and easily find your content. All searches are performed client-side meaning there\u0026rsquo;s nothing to configure on the server and queries are performed super fast. Simply enable the feature in your site configuration and you\u0026rsquo;re all set. Oh, and it also supports full keyboard navigation!\nTables of contents # A highly requested feature, Blowfish now supports tables of contents on article pages. You can see it in action on this page. The contents are fully responsive and will adjust to take advantage of the space available at different screen resolutions.\nAvailable on a global or per article basis, the table of contents can be fully customised using standard Hugo configuration values, allowing you to adjust the behaviour to suit your project.\nAccessibility improvements # From adding ARIA descriptions to more items or simply adjusting the contrast of certain text elements, this release is the most accessible yet.\nVersion 2 also introduces \u0026ldquo;skip to content\u0026rdquo; and \u0026ldquo;scroll to top\u0026rdquo; links that enable quick navigation. There\u0026rsquo;s also keyboard shortcuts for enabling items like search without reaching for the mouse.\nThe new image resizing features also provide full control over alt and title elements enabling an accessible experience for all visitors.\nA whole lot more # There\u0026rsquo;s countless other features to explore. From being able to display taxonomies on articles and list pages, to using the new headline author parameter to customise your homepage. There\u0026rsquo;s also improved JSON-LD strucured data which further optimises SEO performance.\n","date":"19 January 2022","permalink":"/docs/welcome/","section":"Documentation","summary":"Blowfish is packed with tons of features. The original aim of Blowfish was to develop a theme that was simple and lightweight. The theme is a fork of Congo and expands its initial vision.","title":"Welcome to Blowfish"},{"content":"","date":"7 November 2021","permalink":"/examples/repo-blowfish-lite/","section":"Showcase","summary":"","title":"Blowfish Lite - Repo"},{"content":"","date":"6 November 2021","permalink":"/examples/repo-blowfish-artist/","section":"Showcase","summary":"","title":"Blowfish Artist - Repo"},{"content":"","date":"6 November 2021","permalink":"/examples/repo-blowfish-lowkey/","section":"Showcase","summary":"","title":"Blowfish Lowkey - Repo"},{"content":"","date":"6 November 2020","permalink":"/examples/blowfish-template/","section":"Showcase","summary":"","title":"Blowfish Template"},{"content":"","date":"6 November 2020","permalink":"/examples/blowfish-template-repo/","section":"Showcase","summary":"","title":"Blowfish Template - GitHub Repo"},{"content":"","date":"16 August 2020","permalink":"/tags/installation/","section":"Tags","summary":"","title":"installation"},{"content":"Simply follow the standard Hugo Quick Start procedure to get up and running quickly.\nDetailed installation instructions can be found below. Instructions for updating the theme are also available.\nInstallation # These instructions will get you up and running using Hugo and Blowfish from a completely blank state. Most of the dependencies mentioned in this guide can be installed using the package manager of choice for your platform.\nInstall Hugo # If you haven\u0026rsquo;t used Hugo before, you will need to install it onto your local machine. You can check if it\u0026rsquo;s already installed by running the command hugo version.\nMake sure you are using Hugo version 0.87.0 or later as the theme takes advantage of some of the latest Hugo features. You can find detailed installation instructions for your platform in the Hugo docs.\nCreate a new site # Run the command hugo new site mywebsite to create a new Hugo site in a directory named mywebsite.\nNote that you can name the project directory whatever you choose, but the instructions below will assume it\u0026rsquo;s named mywebsite. If you use a different name, be sure to substitute it accordingly.\nDownload the Blowfish theme # There several different ways to install the Blowfish theme into your Hugo website. From easiest to most difficult to install and maintain, they are:\nGit submodule (recommended) Hugo module Manual file copy If you\u0026rsquo;re unsure, choose the Git submodule method.\nInstall using git # This method is the quickest and easiest for keeping the theme up-to-date. Besides Hugo and Go, you\u0026rsquo;ll also need to ensure you have Git installed on your local machine.\nChange into the directory for your Hugo website (that you created above), initialise a new git repository and add Blowfish as a submodule.\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish Then continue to set up the theme configuration files.\nInstall using Hugo # For this method you\u0026rsquo;ll use Hugo to manage your themes. Hugo uses Go to initialise and manage modules so you need to ensure you have go installed before proceeding.\nDownload and install Go. You can check if it\u0026rsquo;s already installed by using the command go version.\nMake sure you are using Go version 1.12 or later as Hugo requires this for modules to work correctly. From your Hugo project directory (that you created above), initialise modules for your website:\n# If you\u0026#39;re managing your project on GitHub hugo mod init github.com/\u0026lt;username\u0026gt;/\u0026lt;repo-name\u0026gt; # If you\u0026#39;re managing your project locally hugo mod init my-project Add the theme to your configuration by creating a new file config/_default/module.toml and adding the following:\n[[imports]] path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; Start your server using hugo server and the theme will be downloaded automatically.\nContinue to set up the theme configuration files.\nInstall manually # Download the latest release of the theme source code.\nDownload from Github Extract the archive, rename the folder to blowfish and move it to the themes/ directory inside your Hugo project\u0026rsquo;s root folder.\nContinue to set up the theme configuration files.\nSet up theme configuration files # In the root folder of your website, delete the config.toml file that was generated by Hugo. Copy the *.toml config files from the theme into your config/_default/ folder. This will ensure you have all the correct theme settings and will enable you to easily customise the theme to your needs.\nNote: You should not overwrite the module.toml file if one already exists in your project! Depending on how you installed the theme you will find the theme config files in different places:\nHugo Modules: In the Hugo cache directory, or download a copy from GitHub Git submodule or Manual install: themes/blowfish/config/_default Once you\u0026rsquo;ve copied the files, your config folder should look like this:\nconfig/_default/ ├─ config.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml # if you installed using Hugo Modules └─ params.toml Important: If you didn\u0026rsquo;t use Hugo Modules to install Blowfish, you must add the line theme = \u0026quot;blowfish\u0026quot; to the top of your config.toml file. Next steps # The basic Blowfish installation is now complete. Continue to the Getting Started section to learn more about configuring the theme.\nInstalling updates # From time to time there will be new releases posted that apply fixes and add new functionality to the theme. In order to take advantage of these changes, you will need to update the theme files on your website.\nHow you go about this will depend on the installation method you chose when the theme was originally installed. Instructions for each method can be found below.\nGit submodule Hugo module Manual file copy Update using git # Git submodules can be updated using the git command. Simply execute the following command and the latest version of the theme will be downloaded into your local repository:\ngit submodule update --remote --merge Once the submodule has been updated, rebuild your site and check everything works as expected.\nUpdate using Hugo # Hugo makes updating modules super easy. Simply change into your project directory and execute the following command:\nhugo mod get -u Hugo will automatically update any modules that are required for your project. It does this by inspecting your module.toml and go.mod files. If you have any issues with the update, check to ensure these files are still configured correctly.\nThen simply rebuild your site and check everything works as expected.\nUpdate manually # Updating Blowfish manually requires you to download the latest copy of the theme and replace the old version in your project.\nNote that any local customisations you have made to the theme files will be lost during this process. Download the latest release of the theme source code.\nDownload from Github Extract the archive, rename the folder to blowfish and move it to the themes/ directory inside your Hugo project\u0026rsquo;s root folder. You will need to overwrite the existing directory to replace all the theme files.\nRebuild your site and check everything works as expected.\n","date":"16 August 2020","permalink":"/docs/installation/","section":"Documentation","summary":"Simply follow the standard Hugo Quick Start procedure to get up and running quickly.\nDetailed installation instructions can be found below. Instructions for updating the theme are also available.\nInstallation # These instructions will get you up and running using Hugo and Blowfish from a completely blank state.","title":"Installation"},{"content":" This section assumes you have already installed the Blowfish theme. The config files that ship with Blowfish contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.\nBasic configuration # Before creating any content, there are a few things you should set for a new installation. Starting in the config.toml file, set the baseURL and languageCode parameters. The languageCode should be set to the main language that you will be using to author your content.\n# config/_default/config.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; The next step is to configure the language settings. Although Blowfish supports multilingual setups, for now, just configure the main language.\nLocate the languages.en.toml file in the config folder. If your main language is English you can use this file as is. Otherwise, rename it so that it includes the correct language code in the filename. For example, for French, rename the file to languages.fr.toml.\nNote that the language code in the language config filename should match the languageCode setting in config.toml. # config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] The [author] configuration determines how the author information is displayed on the website. The image should be placed in the site\u0026rsquo;s assets/ folder. Links will be displayed in the order they are listed.\nIf you need extra detail, further information about each of these configuration options, is covered in the Configuration section.\nColour schemes # Blowfish ships with a number of colour schemes out of the box. To change the scheme, simply set the colorScheme theme parameter. Valid options are blowfish (default), avocado, fire, ocean and slate.\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish defines a three-colour palette that is used throughout the theme. Each main colour contains ten shades which are based upon the colours that are included in Tailwind.\nBlowfish (default) # Avocado # Fire # Forest # Princess # Neon # Bloody # Terminal # Marvel # Noir # Autumn # Congo # Slate # Although these are the default schemes, you can also create your own. Refer to the Advanced Customisation section for details.\nOrganising content # By default, Blowfish doesn\u0026rsquo;t force you to use a particular content type. In doing so you are free to define your content as you wish. You might prefer pages for a static site, posts for a blog, or projects for a portfolio.\nHere\u0026rsquo;s a quick overview of a basic Blowfish project. All content is placed within the content folder:\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish It\u0026rsquo;s important to have a firm grasp of how Hugo expects content to be organised as the theme is designed to take full advantage of Hugo page bundles. Be sure to read the official Hugo docs for more information.\nBlowfish is also flexible when it comes to taxonomies. Some people prefer to use tags and categories to group their content, others prefer to use topics.\nHugo defaults to using posts, tags and categories out of the box and this will work fine if that\u0026rsquo;s what you want. If you wish to customise this, however, you can do so by creating a taxonomies.toml configuration file:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; This will replace the default tags and categories with topics. Refer to the Hugo Taxonomy docs for more information on naming taxonomies.\nWhen you create a new taxonomy, you will need to adjust the navigation links on the website to point to the correct sections, which is covered below.\nMenus # Blowfish has two menus that can be customised to suit the content and layout of your site. The main menu appears in the site header and the footer menu appears at the bottom of the page just above the copyright notice.\nBoth menus are configured in the menus.en.toml file. Similarly to the languages config file, if you wish to use another language, rename this file and replace en with the language code you wish to use.\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; The name parameter specifies the text that is used in the menu link. You can also optionally provide a title which fills the HTML title attribute for the link.\nThe pageRef parameter allows you to easily reference Hugo content pages and taxonomies. It is the quickest way to configure the menu as you can simply refer to any Hugo content item and it will automatically build the correct link. To link to external URLs, the url parameter can be used.\nThe pre parameter allows you to place an icon from Blowfish\u0026rsquo;s icon set on the menu entry. This parameter can be used with name parameter or by itself. If you want to use multiple menu entries with just icons please set the identifierparameter otherwise Hugo will default to the naming tag as the id and probably not display all the menu entries.\nMenu links will be sorted from lowest to highest weight, and then alphabetically by name.\nBoth menus are completely optional and can be commented out if not required. Use the template provided in the file as a guide.\nNested menus # The theme also supports nested menus. In order to use them you just need to define a parent entry in menu.toml and its sub-menus using the parent parameter to reference the parent. All properties can be used for sub-menus. Note that pageRef and url will be ignored for the parent entry. Nested menus is only available in the main menu not for the footer.\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 Sub-Navigation menu # Additionally, you can also configure a sub-navigation menu. Just define new menu entries as subnavigation in menu.toml. This will render a second line with caregories below the main header menu.\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 Thumbnails \u0026amp; Backgrounds # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article strucutre, you just need to place an image file (almost all formats are supported bue we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is also a guide with more info and a sample if you want to see how you can do it.\nAdditionally, Blowfish also supports background hero images in articles and lists. In order to use a different image than the featured one, add an image file in which the name starts with background*.\nDetailed configuration # The steps above are the bare minimum configuration. If you now run hugo server you will be presented with a blank Blowfish website. Detailed configuration is covered in the Configuration section.\n","date":"15 August 2020","permalink":"/docs/getting-started/","section":"Documentation","summary":"This section assumes you have already installed the Blowfish theme. The config files that ship with Blowfish contain all of the possible settings that the theme recognises. By default, many of these are commented out but you can simply uncomment them to activate or change a specific feature.","title":"Getting Started"},{"content":"","date":"14 August 2020","permalink":"/tags/config/","section":"Tags","summary":"","title":"config"},{"content":"Blowfish is a highly customisable theme and uses some of the latest Hugo features to simplify how it is configured.\nThe theme ships with a default configuration that gets you up and running with a basic blog or static website.\nConfiguration files bundled with the theme are provided in TOML format as this is the default Hugo syntax. Feel free to convert your config to YAML or JSON if you wish.\nThe default theme configuration is documented in each file so you can freely adjust the settings to meet your needs.\nAs outlined in the installation instructions, you should adjust your theme configuration by modifying the files in the config/_default/ folder of your Hugo project and delete the config.toml file in your project root. Site configuration # Standard Hugo configuration variables are respected throughout the theme, however there are some specific things that should be configured for the best experience.\nThe site configuration is managed through the config/_default/config.toml file. The table below outlines all the settings that the Blowfish takes advantage of.\nNote that the variable names provided in this table use dot notation to simplify the TOML data structure (ie. outputs.home refers to [outputs] home).\nName Default Description theme \u0026quot;blowfish\u0026quot; When using Hugo Modules this config value should be removed. For all other installation types, this must be set to blowfish for the theme to function. baseURL Not set The URL to the root of the website. defaultContentLanguage \u0026quot;en\u0026quot; This value determines the default language of theme components and content. Refer to the language and i18n section below for supported language codes. enableRobotsTXT true When enabled, a robots.txt file will be created in the site root that allows search engines to crawl the entire site. If you prefer to provide your own pre-made robots.txt, set to false and place your file in the static directory. For complete control, you may provide a custom layout to generate this file. paginate 10 The number of articles listed on each page of the article listing. summaryLength 0 The number of words that are used to generate the article summary when one is not provided in the front matter. A value of 0 will use the first sentence. This value has no effect when summaries are hidden. outputs.home [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] The output formats that are generated for the site. Blowfish requires HTML, RSS and JSON for all theme components to work correctly. permalinks Not set Refer to the Hugo docs for permalink configuration. taxonomies Not set Refer to the Organising content section for taxonomy configuration. Thumbnails # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article strucutre, you just need to place an image file (almost all formats are supported but we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is also a guide with more info and a sample if you want to see how you can do it.\nLanguage and i18n # Blowfish is optimised for full multilingual websites and theme assets are translated into several languages out of the box. The language configuration allows you to generate multiple versions of your content to provide a customised experience to your visitors in their native language.\nThe theme currently supports the following languages by default:\nLanguage Code 🇧🇩 Bengali bn 🇨🇿 Czech cs 🇩🇪 German de 🇬🇧 English en 🇪🇸 Spanish (Spain) es 🇫🇮 Finnish fi 🇫🇷 French fr 🇮🇱 Hebrew he 🇭🇷 Croatian hr 🇭🇺 Hungarian hu 🇮🇩 Indonesian id 🇮🇹 Italian it 🇯🇵 Japanese ja 🇵🇱 Polish pl 🇧🇷 Portuguese (Brazil) pt-br 🇵🇹 Portuguese (Portugal) pt-pt 🇷🇴 Romanian ro 🇷🇺 Russian ru 🇹🇷 Turkish tr 🇻🇳 Vietnamese vi 🇨🇳 Simplified Chinese (China) zh-cn 🇹🇼 Traditional Chinese (Taiwan) zh-tw The default translations can be overridden by creating a custom file in i18n/[code].yaml that contains the translation strings. You can also use this method to add new languages. If you\u0026rsquo;d like to share a new translation with the community, please open a pull request.\nConfiguration # In order to be as flexible as possible, a language configuration file needs to be created for each language on the website. By default Blowfish includes an English language configuration at config/_default/languages.en.toml.\nThe default file can be used as a template to create additional languages, or renamed if you wish to author your website in a language other than English. Simply name the file using the format languages.[language-code].toml.\nNote: Ensure the defaultContentLanguage parameter in the site configuration matches the language code in your language config filename. Name Default Description languageCode \u0026quot;en\u0026quot; The Hugo language code for this file. It can be a top-level language (ie. en) or a sub-variant (ie. en-au) and should match the language code in the filename. Hugo expects this value to always be in lowercase. For proper HTML compliance, set the isoCode parameter which is case-sensitive. languageName \u0026quot;English\u0026quot; The name of the language. displayName \u0026quot;EN\u0026quot; The name used when the language appears on the website. isoCode \u0026quot;en\u0026quot; The ISO language code for HTML metadata purposes. It can be a top-level language (ie. en) or a sub-variant (ie. en-AU). weight 1 The weight determines the order of languages when building multilingual sites. rtl false Whether or not this is a RTL language. Set to true to reflow content from right-to-left. Blowfish fully supports using RTL and LTR languages at the same time and will dynamically adjust to both. dateFormat \u0026quot;2 January 2006\u0026quot; How dates are formatted in this language. Refer to the Hugo docs for acceptable formats. title \u0026quot;Blowfish\u0026quot; The title of the website. This will be displayed in the site header and footer. description Not set The website description. This will be used in the site metadata. copyright Not set A Markdown string for the site footer copyright message can include the placeholder { year } to dynamically insert the current year. If none is provided, Blowfish will automatically generate a copyright string using the site title. author.name Not set The author\u0026rsquo;s name. This will be displayed in article footers, and on the homepage when the profile layout is used. author.image Not set Path to the image file of the author. The image should be a 1:1 aspect ratio and placed in the site\u0026rsquo;s assets/ folder. author.headline Not set A Markdown string containing the author\u0026rsquo;s headline. It will be displayed on the profile homepage under the author\u0026rsquo;s name. author.bio Not set A Markdown string containing the author\u0026rsquo;s bio. It will be displayed in article footers. author.links Not set The links to display alongside the author\u0026rsquo;s details. The config file contains example links which can simply be uncommented to enable. The order that the links are displayed is determined by the order they appear in the array. Custom links can be added by providing corresponding SVG icon assets in assets/icons/. Menus # Blowfish also supports language-specific menu configurations. Menu config files follow the same naming format as the languages file. Simply provide the language code in the file name to tell Hugo which language the file relates to.\nMenu config files are named with the format menus.[language-code].toml. Always ensure that the language code used in the menus configuration matches the languages configuration.\nThe Getting Started section explains more about the structure of this file. You can also refer to the Hugo menu docs for more configuration examples.\nTheme parameters # Blowfish provides a large number of configuration parameters that control how the theme functions. The table below outlines every available parameter in the config/_default/params.toml file.\nMany of the article defaults here can be overridden on a per article basis by specifying it in the front matter. Refer to the Front Matter section for further details.\nGlobal # Name Default Description colorScheme \u0026quot;blowfish\u0026quot; The theme colour scheme to use. Valid values are blowfish (default), avocado, ocean, fire and slate. Refer to the Colour Schemes section for more details. defaultAppearance \u0026quot;light\u0026quot; The default theme appearance, either light or dark. autoSwitchAppearance true Whether the theme appearance automatically switches based upon the visitor\u0026rsquo;s operating system preference. Set to false to force the site to always use the defaultAppearance. enableSearch false Whether site search is enabled. Set to true to enable search functionality. Note that the search feature depends on the outputs.home setting in the site configuration being set correctly. enableCodeCopy false Whether copy-to-clipboard buttons are enabled for \u0026lt;code\u0026gt; blocks. The highlight.noClasses parameter must be set to false for code copy to function correctly. Read more about other configuration files below. logo Not set The relative path to the site logo file within the assets/ folder. The logo file should be provided at 2x resolution and supports any image dimensions. mainSections Not set The sections that should be displayed in the recent articles list. If not provided the section with the greatest number of articles is used. showViews Not set Whether or not articles and list views are displayed. This requires firebase integrations to be enabled, look below. showLikes Not set Whether or not articles and list likes are displayed. This requires firebase integrations to be enabled, look below. robots Not set String that indicates how robots should handle your site. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. disableImageZoom false Disables image zoom feature across all the images in the site. disableImageOptimization false Disables image resize and optimization features across all the images in the site. defaultBackgroundImage Not set Default background image for both background homepage layout and background hero style defaultBackgrouclearndImage Not set Marks menu entries in the main manu when selected smartTOC Not set Activate smart Table of Contents, items in view will be highlighted. smartTOCHideUnfocusedChildren Not set When smart Table of Contents is turned on, this will hide deeper levels of the table when they are not in focus. Header # Name Default Description header.layout \u0026quot;basic\u0026quot; Defines the header for the entire site, supported values are basic, fixed, fixed-fill, and fixed-fill-blur. Footer # Name Default Description footer.showMenu true Show/hide the footer menu, which can be configured in the [[footer]] section of the config/_default/menus.en.toml file. footer.showCopyright true Whether or not to show the copyright string in the site footer. Note that the string itself can be customised using the copyright parameter in the languages configuration. footer.showThemeAttribution true Whether or not to show the \u0026ldquo;powered by\u0026rdquo; theme attribution in the site footer. If you choose to disable this message, please consider attributing the theme somewhere else on your site (for example, on your about page). footer.showAppearanceSwitcher false Whether or not to show the appearance switcher in the site footer. The browser\u0026rsquo;s local storage is used to persist the visitor\u0026rsquo;s preference. footer.showScrollToTop true When set to true the scroll to top arrow is displayed. Homepage # Name Default Description homepage.layout \u0026quot;profile\u0026quot; The layout of the homepage. Valid values are page, profile, hero, card, background, or custom. When set to custom, you must provide your own layout by creating a /layouts/partials/home/custom.html file. Refer to the Homepage Layout section for more details. homepage.homepageImage Not set Image to be used in hero and card layouts. Refer to the Homepage Layout section for more details. homepage.showRecent false Whether or not to display the recent articles list on the homepage. homepage.showRecentItems 5 How many articles to display if showRecent is true. If variable is set to 0 or if it isn\u0026rsquo;t defined the system will default to 5 articles. homepage.showMoreLink false Wether or not to display a show more link at the end of your posts that takes the user to a predefined place. homepage.showMoreLinkDest /posts The destination of the show more button. homepage.cardView false Display recent articles as a gallery of cards. homepage.cardViewScreenWidth false Enhance the width of the recent articles card gallery to take the full width available. homepage.layoutBackgroundBlur false Makes the background image in the homepage layout blur with the scroll Article # Name Default Description article.showDate true Whether or not article dates are displayed. article.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. article.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. article.showDateUpdated false Whether or not the dates articles were updated are displayed. article.showAuthor true Whether or not the author box is displayed in the article footer. article.showHero false Whether the thumbnail image will be shown as a hero image within each article page. article.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. article.layoutBackgroundBlur true Makes the background image in the background article heroStyle blur with the scroll article.layoutBackgroundHeaderSpace true Add space between the header and the body. article.showBreadcrumbs false Whether or not breadcrumbs are displayed in the article header. article.showDraftLabel true Whether or not the draft indicator is shown next to articles when site is built with --buildDrafts. article.showEdit false Whether or not the link to edit the article content should be displayed. article.editURL Not set When article.showEdit is active, the URL for the edit link. article.editAppendPath true When article.showEdit is active, whether or not the path to the current article should be appended to the URL set at article.editURL. article.seriesOpened false Whether or not the series module will be displayed open by default or not. article.showHeadingAnchors true Whether or not heading anchor links are displayed alongside headings within articles. article.showPagination true Whether or not the next/previous article links are displayed in the article footer. article.invertPagination false Whether or not to flip the direction of the next/previous article links. article.showReadingTime true Whether or not article reading times are displayed. article.showTableOfContents false Whether or not the table of contents is displayed on articles. article.showTaxonomies false Whether or not the taxonomies related to this article are displayed. article.showAuthorsBadges false Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. article.showWordCount false Whether or not article word counts are displayed. article.showComments false Whether or not the comments partial is included after the article footer. article.showSummary false Whether or not article summaries are displayed on list pages. If a summary is not provided in the front matter, one will be auto generated using the summaryLength parameter in the site configuration. article.sharingLinks Not set Which sharing links to display at the end of each article. When not provided, or set to false no links will be displayed. Available values are: \u0026ldquo;linkedin\u0026rdquo;, \u0026ldquo;twitter\u0026rdquo;, \u0026ldquo;reddit\u0026rdquo;, \u0026ldquo;pinterest\u0026rdquo;, \u0026ldquo;facebook\u0026rdquo;, \u0026ldquo;email\u0026rdquo;, \u0026ldquo;whatsapp\u0026rdquo;, and \u0026ldquo;telegram\u0026rdquo; List # Name Default Description list.showHero false Whether the thumbnail image will be shown as a hero image within each list page. list.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. list.showBreadcrumbs false Whether or not breadcrumbs are displayed in the header on list pages. list.layoutBackgroundBlur true Makes the background image in the background list heroStyle blur with the scroll list.layoutBackgroundHeaderSpace true Add space between the header and the body. list.showTableOfContents false Whether or not the table of contents is displayed on list pages. list.showSummary false Whether or not article summaries are displayed on list pages. If a summary is not provided in the front matter, one will be auto generated using the summaryLength parameter in the site configuration. list.showViews false Whether or not list views are displayed. This requires firebase integrations to be enabled, look below. list.showLikes false Whether or not list likes are displayed. This requires firebase integrations to be enabled, look below. list.showCards false Whether or not each article is displayed as a card or as simple inline text. list.groupByYear true Whether or not articles are grouped by year on list pages. list.cardView false Display lists as a gallery of cards. list.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. list.constrainItemsWidth false Limit item width to prose to increase readability. Useful when no feature images are available. list.showTableOfContents false Whether or not the table of contents is displayed on articles. Sitemap # Name Default Description sitemap.excludedKinds [\u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot;] Kinds of content that should be excluded from the generated /sitemap.xml file. Refer to the Hugo docs for acceptable values. Taxonomy # Name Default Description taxonomy.showTermCount true Whether or not the number of articles within a taxonomy term is displayed on the taxonomy listing. taxonomy.showHero false Whether the thumbnail image will be shown as a hero image within each taxonomy page. taxonomy.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. taxonomy.showBreadcrumbs false Whether or not breadcrumbs are displayed in the taxonomy header. taxonomy.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showTableOfContents false Whether or not the table of contents is displayed on taxonomies. taxonomy.cardView false Display lists as a gallery of cards. Term # Name Default Description term.showHero false Whether the thumbnail image will be shown as a hero image within each term page. term.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. term.showBreadcrumbs false Whether or not breadcrumbs are displayed in the term header. term.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. term.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. term.showTableOfContents false Whether or not the table of contents is displayed on terms. term.groupByYear false Whether or not articles are grouped by year on term pages. term.cardView false Display lists as a gallery of cards. term.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. Firebase # Name Default Description firebase.apiKey Not set Firebase apiKey, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.authDomain Not set Firebase authDomain, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.projectId Not set Firebase projectId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.storageBucket Not set Firebase storageBucket, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.messagingSenderId Not set Firebase messagingSenderId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.appId Not set Firebase appId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.measurementId Not set Firebase measurementId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. Fathom Analytics # Name Default Description fathomAnalytics.site Not set The site code generated by Fathom Analytics for the website. Refer to the Analytics docs for more details. fathomAnalytics.domain Not set If using a custom domain with Fathom Analytics, provide it here to serve script.js from the custom domain. BuyMeACoffee # Name Default Description buymeacoffee.identifier Not set The identifier to the target buymeacoffee account. buymeacoffee.globalWidget Not set Activate the global buymeacoffee widget. buymeacoffee.globalWidgetMessage Not set Message what will be displayed the first time a new user lands on the site. buymeacoffee.globalWidgetColor Not set Widget color in hex format. buymeacoffee.globalWidgetPosition Not set Position of the widget, i.e. \u0026ldquo;Left\u0026rdquo; or \u0026ldquo;Right\u0026rdquo; Verifications # Name Default Description verification.google Not set The site verification string provided by Google to be included in the site metadata. verification.bing Not set The site verification string provided by Bing to be included in the site metadata. verification.pinterest Not set The site verification string provided by Pinterest to be included in the site metadata. verification.yandex Not set The site verification string provided by Yandex to be included in the site metadata. Other configuration files # The theme also includes a markup.toml configuration file. This file contains some important parameters that ensure that Hugo is correctly configured to generate sites built with Blowfish.\nAlways ensure this file is present in the config directory and that the required values are set. Failure to do so may cause certain features to function incorrectly and could result in unintended behaviour.\n","date":"14 August 2020","permalink":"/docs/configuration/","section":"Documentation","summary":"Blowfish is a highly customisable theme and uses some of the latest Hugo features to simplify how it is configured.\nThe theme ships with a default configuration that gets you up and running with a basic blog or static website.","title":"Configuration"},{"content":"","date":"14 August 2020","permalink":"/tags/icons/","section":"Tags","summary":"","title":"icons"},{"content":"Blowfish has built-in support for a number of FontAwesome 6 icons. These can be included in your website through either the icon partial or icon shortcode.\nAdditionally, custom icons are also fully supported. Simply provide your own SVG icon assets by placing them in the assets/icons/ directory in the root of your project. Any icons in the icons directory will then be available to use throughout the theme. In order achieve automatic color filling every SVG path needs fill=\u0026ldquo;currentColor\u0026rdquo; XML attribute.\nThe full list of built-in icons and their corresponding names can referenced below.\nIcon name Preview amazon apple bars bell blogger bomb bug check circle-info code codepen comment dev discourse docker download dribbble edit email envelope eye facebook fire flickr fork foursquare ghost github gitlab globe goodreads google hackernews hashnode heart-empty heart image instagram keybase kickstarter ko-fi \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e lastfm lightbulb link linkedin list location-dot lock mastodon medium microsoft moon mug-hot music orcid patreon paypal pencil pgpkey phone pinterest poo reddit researchgate rss rss-square search shield skull-crossbones slack snapchat soundcloud stack-overflow star steam stripe sun tag telegram tiktok triangle-exclamation tumblr twitch twitter wand-magic-sparkles whatsapp xmark youtube ","date":"14 August 2020","permalink":"/samples/icons/","section":"Samples","summary":"Blowfish has built-in support for a number of FontAwesome 6 icons. These can be included in your website through either the icon partial or icon shortcode.\nAdditionally, custom icons are also fully supported.","title":"Icons"},{"content":"","date":"14 August 2020","permalink":"/tags/shortcodes/","section":"Tags","summary":"","title":"shortcodes"},{"content":"","date":"14 August 2020","permalink":"/tags/users/","section":"Tags","summary":"","title":"users"},{"content":" Real websites that are built with Blowfish. Blowfish user? To add your site to this list, submit a pull request. Website Details nunocoracao.com Personal site - Theme author madoke.org Personal site code-chimp.com Personal site mucahitkurtlar.github.io Personal site brendanwallace.github.io Personal site fedeizzo.dev Personal site cuttontail.blog Personal site pmnxis.github.io Personal site ciicadalab.github.io Organization site georgiancodeclub.github.io College club site albertolvera.com Personal site chris.banes.dev Personal site fahru.my.id Personal site jeknom.github.io Personal site blog.watchstep.me Personal site overdevelop.io Personal site loisvelasco.is-a.dev Personal site tabletopflore.com Personal site omarohn.de Personal site spelucin.me Personal site insidemordecai.com Personal site jamesdixon.dev Personal site blastomussa.dev Personal site cdell.io Personal site jam.dsg.li Organization site priyakdey.com Personal site sdehm.dev Personal site dizzytech.de Personal site alejandro-ao.com Personal site adir1.com Personal site niklas-hartmann-dev.de Personal site blog.muffn.io Personal site nick.bouwhuis.net Personal site vividscc.com Business site muhalvin.github.io Personal site mariuskimmina.com Personal site ashwinbalaji.xyz Personal site technicat.com Company site fugugames.com Games site hyperbowl3d.com Game site talkdimsum.com App site alanctanner.com Personal site rdgo.dev Personal site ripplesding.github.io Personal site terraformbuch.de Book site shenshu.fun Personal site Blowfish user? To add your site to this list, submit a pull request. ","date":"14 August 2020","permalink":"/users/","section":"Welcome to my digital abode 👋","summary":"Real websites that are built with Blowfish. Blowfish user? To add your site to this list, submit a pull request. Website Details nunocoracao.com Personal site - Theme author madoke.org Personal site code-chimp.","title":"Users"},{"content":"","date":"13 August 2020","permalink":"/tags/homepage/","section":"Tags","summary":"","title":"homepage"},{"content":"Blowfish provides a fully flexible homepage layout. There are two main templates to choose from with additional settings to adjust the design. Alternatively, you can also provide your own template and have complete control over the homepage content.\nThe layout of the homepage is controlled by the homepage.layout setting in the params.toml configuration file. Additionally, all layouts have the option to include a listing of recent articles.\nProfile layout # The default layout is the profile layout, which is great for personal websites and blogs. It puts the author\u0026rsquo;s details front and centre by providing an image and links to social profiles.\nThe author information is provided in the languages configuration file. Refer to the Getting Started and Language Configuration sections for parameter details.\nAdditionally, any Markdown content that is provided in the homepage content will be placed below the author profile. This allows extra flexibility for displaying a bio or other custom content using shortcodes.\nTo enable the Profile layout, set homepage.layout = \u0026quot;profile\u0026quot; in the params.toml configuration file.\nPage layout # The page layout is simply a normal content page that displays your Markdown content. It\u0026rsquo;s great for static websites and provides a lot of flexibility.\nTo enable the Page layout, set homepage.layout = \u0026quot;page\u0026quot; in the params.toml configuration file.\nHero layout # The hero layout brings together ideas from the profile and card layouts. This one not only displays information on the author of the site but it also loads your markdown beneath it.\nTo enable the Hero layout, set homepage.layout = \u0026quot;hero\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nBackground layout # The background layout is a more smooth version of the hero layout. As in the Hero layout, this one also displays both information on the author of the site and loads your markdown beneath it.\nTo enable the Background layout, set homepage.layout = \u0026quot;background\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nCard layout # The card layout is an extension of the page layout. It provides the same level of flexibility by also displaying your markdown content and adds a card image to display visual content.\nTo enable the Card layout, set homepage.layout = \u0026quot;card\u0026quot; and homepage.homepageImage in the params.toml configuration file.\nCustom layout # If the built-in homepage layouts aren\u0026rsquo;t sufficient for your needs, you have the option to provide your own custom layout. This allows you to have total control over the page content and essentially gives you a blank slate to work with.\nTo enable the Custom layout, set homepage.layout = \u0026quot;custom\u0026quot; in the params.toml configuration file.\nWith the configuration value set, create a new custom.html file and place it in layouts/partials/home/custom.html. Now whatever is in the custom.html file will be placed in the content area of the site homepage. You may use whatever HTML, Tailwind, or Hugo templating functions you wish to define your layout.\nTo include recent articles on the custom layout, use the recent-articles/main.html partial.\nAs an example, the homepage on this site uses the custom layout to allow toggling between the profile and page layouts. Visit the GitHub repo to see how it works.\nRecent articles # All homepage layouts have the option of displaying recent articles below the main page content. To enable this, simply set the homepage.showRecent setting to true in the params.toml configuration file.\nThe articles listed in this section are derived from the mainSections setting which allows for whatever content types you are using on your website. For instance, if you had content sections for posts and projects you could set this setting to [\u0026quot;posts\u0026quot;, \u0026quot;projects\u0026quot;] and all the articles in these two sections would be used to populate the recent list. The theme expects this setting to be an array so if you only use one section for all your content, you should set this accordingly: [\u0026quot;blog\u0026quot;].\nThumbnails # Blowfish was built so it would be easy to add visual support to your articles. If your familiar with Hugo article strucutre, you just need to place an image file (almost all formats are supported bue we recommend .png or .jpg) that starts with feature* inside your article folder. And that\u0026rsquo;s it, Blowfish will then able to both use the image as a thumbnail within your website as well as for oEmbed cards across social platforms.\nHere is a guide with more info and a sample if you want to see an example.\nCard Gallery # Blowfish also supports displaying the standard lists of articles as card galleries. You can config this both for the recent section in the homepage and for lists of articles across your website. For homepage you can use homepage.cardView and homepage.cardViewScreenWidth; and for lists use list.cardView and list.cardViewScreenWidth. Check the Configuration docs for more details, and the homepage for a live demo.\n","date":"13 August 2020","permalink":"/docs/homepage-layout/","section":"Documentation","summary":"Blowfish provides a fully flexible homepage layout. There are two main templates to choose from with additional settings to adjust the design. Alternatively, you can also provide your own template and have complete control over the homepage content.","title":"Homepage Layout"},{"content":"","date":"13 August 2020","permalink":"/tags/layouts/","section":"Tags","summary":"","title":"layouts"},{"content":"","date":"12 August 2020","permalink":"/tags/front-matter/","section":"Tags","summary":"","title":"front matter"},{"content":"In addition to the default Hugo front matter parameters, Blowfish adds a number of additional options to customise the presentation of individual articles. All the available theme front matter parameters are listed below.\nFront matter parameter default values are inherited from the theme\u0026rsquo;s base configuration, so you only need to specify these parameters in your front matter when you want to override the default.\nName Default Description title Not set The name of the article. description Not set The text description for the article. It is used in the HTML metadata. externalUrl Not set If this article is published on a third-party website, the URL to this article. Providing a URL will prevent a content page being generated and any references to this article will link directly to the third-party website. editURL article.editURL When showEdit is active, the URL for the edit link. editAppendPath article.editAppendPath When showEdit is active, whether or not the path to the current article should be appended to the URL set at editURL. groupByYear list.groupByYear Whether or not articles are grouped by year on list pages. menu Not set When a value is provided, a link to this article will appear in the named menus. Valid values are main or footer. robots Not set String that indicates how robots should handle this article. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. sharingLinks article.sharingLinks Which sharing links to display at the end of this article. When not provided, or set to false no links will be displayed. showAuthor article.showAuthor Whether or not the author box for the deafult author is displayed in the article footer. authors Not set Array of values for authors, if set it overrides showAuthor settings for page or site. Used on the multiple authors feature, check this page for more details on how to configure that feature. showAuthorsBadges article.showAuthorsBadges Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. showHero article.showHero Whether the thumbnail image will be shown as a hero image within the article page. heroStyle article.heroStyle Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. showBreadcrumbs article.showBreadcrumbs or list.showBreadcrumbs Whether the breadcrumbs are displayed in the article or list header. showDate article.showDate Whether or not the article date is displayed. The date is set using the date parameter. showDateUpdated article.showDateUpdated Whether or not the date the article was updated is displayed. The date is set using the lastmod parameter. showEdit article.showEdit Whether or not the link to edit the article content should be displayed. showHeadingAnchors article.showHeadingAnchors Whether or not heading anchor links are displayed alongside headings within this article. showPagination article.showPagination Whether or not the next/previous article links are displayed in the article footer. invertPagination article.invertPagination Whether or not to flip the direction of the next/previous article links. showReadingTime article.showReadingTime Whether or not the article reading time is displayed. showTaxonomies article.showTaxonomies Whether or not the taxonomies that relate to this article are displayed. showTableOfContents article.showTableOfContents Whether or not the table of contents is displayed on this article. showWordCount article.showWordCount Whether or not the article word count is displayed. showComments article.showComments Whether or not the comments partial is included after the article footer. showSummary list.showSummary Whether or not the article summary should be displayed on list pages. showViews article.showViews Whether or not the article views should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish showLikes article.showLikes Whether or not the article likes should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish seriesOpened article.seriesOpened Whether or not the series module will be displayed open by default or not. series Not set Array of series the article belongs to, we recommend using only one series per article. series_order Not set Number of the article within the series. summary Auto generated using summaryLength (see site configuration) When showSummary is enabled, this is the Markdown string to be used as the summary for this article. xml true unless excluded by sitemap.excludedKinds Whether or not this article is included in the generated /sitemap.xml file. layoutBackgroundBlur true Makes the background image in the background heroStyle blur with the scroll layoutBackgroundHeaderSpace true Add space between the header and the body. ","date":"12 August 2020","permalink":"/docs/front-matter/","section":"Documentation","summary":"In addition to the default Hugo front matter parameters, Blowfish adds a number of additional options to customise the presentation of individual articles. All the available theme front matter parameters are listed below.","title":"Front Matter"},{"content":" Thumbnails # Blowfish was enhanced in order to make it easy to add visual support to your posts. To do so, you just need to place an image file (almost all formats are supported bue we recommend .png or .jpg) that starts with feature* inside your article main directory as shown in the example below.\ncontent └── awesome_article ├── index.md └── featured.png This will tell Blowfish that this article has a feature image that can be used both as a thumbnail across your website as well as for oEmbed cards across social platforms.\nFolder Strucutre # If you are using single .md files for your articles and have a file structure similar to this:\ncontent └── awesome_article.md You need to change it from a single markdown file into a folder. Create a directory with the same name of the article, inside create a index.md file. You\u0026rsquo;ll get a structure similar to what\u0026rsquo;s below.\ncontent └── awesome_article └── featured.png The you just need to add an image like explain earlier. If you want to see a sample of this you can consult this sample.\nHero Images # Thumbnails will be used by default as hero images withing each article. Use the global article.showHero or the front-matter parameter showHero to control this feature across the entire site or for each specific post. If you want to override the style of the hero image you can create a file called hero.html in ./layouts/partials/ that will override the original partial from the theme.\n","date":"12 August 2020","permalink":"/docs/thumbnails/","section":"Documentation","summary":"Thumbnails # Blowfish was enhanced in order to make it easy to add visual support to your posts. To do so, you just need to place an image file (almost all formats are supported bue we recommend .","title":"Thumbnails"},{"content":"","date":"11 August 2020","permalink":"/tags/icon/","section":"Tags","summary":"","title":"icon"},{"content":"","date":"11 August 2020","permalink":"/tags/lead/","section":"Tags","summary":"","title":"lead"},{"content":"","date":"11 August 2020","permalink":"/tags/mermaid/","section":"Tags","summary":"","title":"mermaid"},{"content":"In addition to all the default Hugo shortcodes, Blowfish adds a few extras for additional functionality.\nAlert # alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.\nParameter Description icon Optional. the icon to display on the left side.\nDefault: exclaimation triangle icon (Check out the icon shortcode for more details on using icons.) iconColor Optional. the color for the icon in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . cardColor Optional. the color for the card background in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . textColor Optional. the color for the text in basic CSS style.\nCan be either hex values (#FFFFFF) or color names (white)\nBy default chosen based on the current color theme . The input is written in Markdown so you can format it however you please.\nExample 1: No params\n{{\u0026lt; alert \u0026gt;}} **Warning!** This action is destructive! {{\u0026lt; /alert \u0026gt;}} Warning! This action is destructive! Example 2: Unnamed param\n{{\u0026lt; alert \u0026#34;twitter\u0026#34; \u0026gt;}} Don\u0026#39;t forget to [follow me](https://twitter.com/nunocoracao) on Twitter. {{\u0026lt; /alert \u0026gt;}} Don\u0026rsquo;t forget to follow me on Twitter. Example 3: Named params\n{{\u0026lt; alert icon=\u0026#34;fire\u0026#34; cardColor=\u0026#34;#e63946\u0026#34; iconColor=\u0026#34;#1d3557\u0026#34; textColor=\u0026#34;#f1faee\u0026#34; \u0026gt;}} This is an error! {{\u0026lt; /alert \u0026gt;}} This is an error! Article # Article will embed a single article into a markdown file. The link to the file should be the .RelPermalink of the file to be embedded. Note that the shortcode will not display anything if it\u0026rsquo;s referencing it\u0026rsquo;s parent. Note: if you are running your website in a subfolder like Blowfish (i.e. /blowfish/) please include that path in the link.\nParameter Description link Required. the .RelPermalink to the target article. Example:\n{{\u0026lt; article link=\u0026#34;/docs/welcome/\u0026#34; \u0026gt;}} Welcome to Blowfish 3 mins\u0026middot; 0 \u0026middot; 0 new docs Badge # badge outputs a styled badge component which is useful for displaying metadata.\nExample:\n{{\u0026lt; badge \u0026gt;}} New article! {{\u0026lt; /badge \u0026gt;}} New article! Button # button outputs a styled button component which can be used to highlight a primary action. It has two optional variables href and target which can be used to specify the URL and target of the link.\nExample:\n{{\u0026lt; button href=\u0026#34;#button\u0026#34; target=\u0026#34;_self\u0026#34; \u0026gt;}} Call to action {{\u0026lt; /button \u0026gt;}} Call to action Carousel # carousel is used to showcase multiple images in an interactive and visually appealing way. This allows a user to slide through multiple images while only taking up the vertical space of a single one. All images are displayed using the full width of the parent component and using one of the predefined aspect ratios of 16:9, 21:9 or 32:9.\nParameter Description images Required. A regex string to match image names. aspectRatio Optional. The aspect ratio for the carousel. Either 16-9, 21-9 or 32-9. It is set to 16-9 by default. interval Optional. The interval for the auto-scrooling, specified in milliseconds. Defaults to 2000 (2s) Example 1: 16:9 aspect ratio and verbose list of images\n{{\u0026lt; carousel images=\u0026#34;{gallery/03.jpg, gallery/01.jpg, gallery/02.jpg, gallery/04.jpg}\u0026#34; \u0026gt;}} Previous Nextsads Example 2: 21:9 aspect ratio and regex-ed list of images\n{{\u0026lt; carousel images=\u0026#34;gallery/*\u0026#34; aspectRatio=\u0026#34;21-9\u0026#34; interval=\u0026#34;2500\u0026#34; \u0026gt;}} Previous Nextsads Chart # chart uses the Chart.js library to embed charts into articles using simple structured data. It supports a number of different chart styles and everything can be configured from within the shortcode. Simply provide the chart parameters between the shortcode tags and Chart.js will do the rest.\nRefer to the official Chart.js docs for details on syntax and supported chart types.\nExample:\n{{\u0026lt; chart \u0026gt;}} type: \u0026#39;bar\u0026#39;, data: { labels: [\u0026#39;Tomato\u0026#39;, \u0026#39;Blueberry\u0026#39;, \u0026#39;Banana\u0026#39;, \u0026#39;Lime\u0026#39;, \u0026#39;Orange\u0026#39;], datasets: [{ label: \u0026#39;# of votes\u0026#39;, data: [12, 19, 3, 5, 3], }] } {{\u0026lt; /chart \u0026gt;}} You can see some additional Chart.js examples on the charts samples page.\nFigure # Blowfish includes a figure shortcode for adding images to content. The shortcode replaces the base Hugo functionality in order to provide additional performance benefits.\nWhen a provided image is a page resource, it will be optimised using Hugo Pipes and scaled in order to provide images appropriate to different device resolutions. If a static asset or URL to an external image is provided, it will be included as-is without any image processing by Hugo.\nThe figure shortcode accepts six parameters:\nParameter Description src Required. The local path/filename or URL of the image. When providing a path and filename, the theme will attempt to locate the image using the following lookup order: Firstly, as a page resource bundled with the page; then an asset in the assets/ directory; then finally, a static image in the static/ directory. alt Alternative text description for the image. caption Markdown for the image caption, which will be displayed below the image. class Additional CSS classes to apply to the image. href URL that the image should be linked to. default Special parameter to revert to default Hugo figure behaviour. Simply provide default=true and then use normal Hugo shortcode syntax. Blowfish also supports automatic conversion of images included using standard Markdown syntax. Simply use the following format and the theme will handle the rest:\n![Alt text](image.jpg \u0026#34;Image caption\u0026#34;) Example:\n{{\u0026lt; figure src=\u0026#34;abstract.jpg\u0026#34; alt=\u0026#34;Abstract purple artwork\u0026#34; caption=\u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34; \u0026gt;}} \u0026lt;!-- OR --\u0026gt; ![Abstract purple artwork](abstract.jpg \u0026#34;Photo by [Jr Korpa](https://unsplash.com/@jrkorpa) on [Unsplash](https://unsplash.com/)\u0026#34;) Photo by Jr Korpa on Unsplash Gallery # gallery allows you to showcase multiple images at once, in a responsive manner with more varied and interesting layouts.\nIn order to add images to the gallery, use img tags for each image and add class=\u0026quot;grid-wXX\u0026quot; in order for the gallery to be able to identify the column width for each image. The widths available by default start at 10% and go all the way to 100% in 5% increments. For example, to set the width to 65%, set the class to grid-w65. Additionally, widths for 33% and 66% are also available in order to build galleries with 3 cols. You can also leverage tailwind\u0026rsquo;s responsive indicators to have a reponsive grid.\nExample 1: normal gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} Example 2: responsive gallery\n{{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w50 md:grid-w33 xl:grid-w25\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} GitHub Card # github allows you to quickly link a github repository, all while showing and updating in realtime stats about it, such as the number of stars and forks it has.\nParameter Description repo [String] github repo in the format of username/repo Example 1:\n{{\u0026lt; github repo=\u0026#34;nunocoracao/blowfish\u0026#34; \u0026gt;}} nunocoracao/blowfish Personal Website \u0026amp; Blog Theme for Hugo HTML 373 122 GitLab Card # gitlab allows you to quickly link a GitLab Project (GitLab\u0026rsquo;s jargon for repo). It displays realtime stats about it, such as the number of stars and forks it has. Unlike github it can\u0026rsquo;t display the main programming language of a project. Finaly custom GitLab instace URL can be provided, as long as the api/v4/projects/ endpoint is available, making this shortcode compatible with most self-hosted / entreprise deployments.\nParameter Description projectID [String] gitlab numeric ProjectID baseURL [String] optional gitlab instace URL, default is https://gitlab.com/ Example 1:\n{{\u0026lt; gitlab projectID=\u0026#34;278964\u0026#34; \u0026gt;}} GitLab.org / GitLab GitLab is an open source end-to-end software development platform with built-in version control, issue tracking, code review, CI/CD, and more. Self-host GitLab on your own servers, in a container, or on a cloud provider. 4357 8231 Icon # icon outputs an SVG icon and takes the icon name as its only parameter. The icon is scaled to match the current text size.\nExample:\n{{\u0026lt; icon \u0026#34;github\u0026#34; \u0026gt;}} Output: Icons are populated using Hugo pipelines which makes them very flexible. Blowfish includes a number of built-in icons for social, links and other purposes. Check the icon samples page for a full list of supported icons.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the shortcode by using the SVG filename without the .svg extension.\nIcons can also be used in partials by calling the icon partial.\nKatex # The katex shortcode can be used to add mathematical expressions to article content using the KaTeX package. Refer to the online reference of supported TeX functions for the available syntax.\nTo include mathematical expressions in an article, simply place the shortcode anywhere with the content. It only needs to be included once per article and KaTeX will automatically render any markup on that page. Both inline and block notation are supported.\nInline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters. Alternatively, block notation can be generated using $$ delimiters.\nExample:\n{{\u0026lt; katex \u0026gt;}} \\\\(f(a,b,c) = (a^2+b^2+c^2)^3\\\\) \\(f(a,b,c) = (a^2+b^2+c^2)^3\\)\nCheck out the mathematical notation samples page for more examples.\nLead # lead is used to bring emphasis to the start of an article. It can be used to style an introduction, or to call out an important piece of information. Simply wrap any Markdown content in the lead shortcode.\nExample:\n{{\u0026lt; lead \u0026gt;}} When life gives you lemons, make lemonade. {{\u0026lt; /lead \u0026gt;}} When life gives you lemons, make lemonade. List # List will display a list of recent articles. This shortcode requires a limit value to constraint the list. Additionally, it supports a where and a value in order to filter articles by their parameters. Note that this shortcode will not display its parent page but it will count for the limit value.\nParameter Description limit Required. the number of recent articles to display. title Optional title for the list, default is Recent where The variable to be used for the query of articles e.g. Type value The value that will need to match the parameter defined in where for the query of articles e.g. for where == Type a valid value could be sample The where and value values are used in the following query where .Site.RegularPages $where $value in the code of the shortcode. Check Hugo docs to learn more about which parameters are available to use. Example #1:\n{{\u0026lt; list limit=2 \u0026gt;}} Recent Import Datasets with Python 0 \u0026middot; 0 Google Advanced Data Analytics Professional Certificate python guide Python Functions for the Discovery of a Dataset 0 \u0026middot; 0 Google Advanced Data Analytics Professional Certificate python guide Example #2:\n{{\u0026lt; list title=\u0026#34;Samples\u0026#34; limit=5 where=\u0026#34;Type\u0026#34; value=\u0026#34;sample\u0026#34; \u0026gt;}} Samples Multiple Authors 1 min\u0026middot; 0 \u0026middot; 0 Nuno Coração ,\u0026nbsp; Dummy Second Author authors sample Thumbnails 1 min\u0026middot; 0 \u0026middot; 0 thumbnail sample Icons 1 min\u0026middot; 0 \u0026middot; 0 icons sample shortcodes Markdown 3 mins\u0026middot; 0 \u0026middot; 0 markdown css html sample Rich Content 1 min\u0026middot; 0 \u0026middot; 0 shortcodes privacy sample gist twitter youtube vimeo Mermaid # mermaid allows you to draw detailed diagrams and visualisations using text. It uses Mermaid under the hood and supports a wide variety of diagrams, charts and other output formats.\nSimply write your Mermaid syntax within the mermaid shortcode and let the plugin do the rest.\nRefer to the official Mermaid docs for details on syntax and supported diagram types.\nExample:\n{{\u0026lt; mermaid \u0026gt;}} graph LR; A[Lemons]--\u0026gt;B[Lemonade]; B--\u0026gt;C[Profit] {{\u0026lt; /mermaid \u0026gt;}} graph LR; A[Lemons]--\u003eB[Lemonade]; B--\u003eC[Profit] You can see some additional Mermaid examples on the diagrams and flowcharts samples page.\nSwatches # swatches outputs a set of up to three different colors to showcase color elements like a color palette. This shortcode takes the HEX codes of each color and creates the visual elements for each.\nExample\n{{\u0026lt; swatches \u0026#34;#64748b\u0026#34; \u0026#34;#3b82f6\u0026#34; \u0026#34;#06b6d4\u0026#34; \u0026gt;}} Output Timeline # The timeline creates a visual timeline that can be used in different use-cases, e.g. professional experience, a project\u0026rsquo;s achievements, etc. The timeline shortcode relies on the timelineItem sub-shortcode to define each item within the main timeline. Each item can have the following properties.\nParameter Description icon the icon to be used in the timeline visuals. header header for each entry badge text to place within the top righ badge subheader entry\u0026rsquo;s subheader Example:\n{{\u0026lt; timeline \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;github\u0026#34; header=\u0026#34;header\u0026#34; badge=\u0026#34;badge test\u0026#34; subheader=\u0026#34;subheader\u0026#34; \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;code\u0026#34; header=\u0026#34;Another Awesome Header\u0026#34; badge=\u0026#34;date - present\u0026#34; subheader=\u0026#34;Awesome Subheader\u0026#34; \u0026gt;}} With html code \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Coffee\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Tea\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Milk\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; timelineItem icon=\u0026#34;star\u0026#34; header=\u0026#34;Shortcodes\u0026#34; badge=\u0026#34;AWESOME\u0026#34; \u0026gt;}} With other shortcodes {{\u0026lt; gallery \u0026gt;}} \u0026lt;img src=\u0026#34;gallery/01.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/02.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/03.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/04.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/05.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/06.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; \u0026lt;img src=\u0026#34;gallery/07.jpg\u0026#34; class=\u0026#34;grid-w33\u0026#34; /\u0026gt; {{\u0026lt; /gallery \u0026gt;}} {{\u0026lt; /timelineItem \u0026gt;}} {{\u0026lt; /timeline \u0026gt;}} header badge test subheader Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus non magna ex. Donec sollicitudin ut lorem quis lobortis. Nam ac ipsum libero. Sed a ex eget ipsum tincidunt venenatis quis sed nisl. Pellentesque sed urna vel odio consequat tincidunt id ut purus. Nam sollicitudin est sed dui interdum rhoncus. Another Awesome Header date - present Awesome Subheader With html code Coffee Tea Milk Shortcodes AWESOME With other shortcodes TypeIt # TypeIt is the most versatile JavaScript tool for creating typewriter effects on the planet. With a straightforward configuration, it allows you to type single or multiple strings that break lines, delete \u0026amp; replace each other, and it even handles strings that contain complex HTML.\nBlowfish implements a sub-set of TypeIt features using a shortcode. Write your text within the typeit shortcode and use the following parameters to configure the behavior you want.\nParameter Description tag [String] html tag that will be used to render the strings. classList [String] List of css classes to apply to the html element. initialString [String] Initial string that will appear written and will be replaced. speed [number] Typing speed, measured in milliseconds between each step. lifeLike [boolean] Makes the typing pace irregular, as if a real person is doing it. startDelay [number] The amount of time before the plugin begins typing after being initialized. breakLines [boolean] Whether multiple strings are printed on top of each other (true), or if they\u0026rsquo;re deleted and replaced by each other (false). waitUntilVisible [boolean] Determines if the instance will begin when loaded or only when the target element becomes visible in the viewport. The default is true loop [boolean] Whether your strings will continuously loop after completing Example 1:\n{{\u0026lt; typeit \u0026gt;}} Lorem ipsum dolor sit amet {{\u0026lt; /typeit \u0026gt;}} Example 2:\n{{\u0026lt; typeit tag=h1 lifeLike=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} Example 3:\n{{\u0026lt; typeit tag=h3 speed=50 breakLines=false loop=true \u0026gt;}} Lorem ipsum dolor sit amet, consectetur adipiscing elit. {{\u0026lt; /typeit \u0026gt;}} ","date":"11 August 2020","permalink":"/docs/shortcodes/","section":"Documentation","summary":"In addition to all the default Hugo shortcodes, Blowfish adds a few extras for additional functionality.\nAlert # alert outputs its contents as a stylised message box within your article. It\u0026rsquo;s useful for drawing attention to important information that you don\u0026rsquo;t want the reader to miss.","title":"Shortcodes"},{"content":"","date":"10 August 2020","permalink":"/tags/analytics/","section":"Tags","summary":"","title":"analytics"},{"content":"","date":"10 August 2020","permalink":"/tags/comments/","section":"Tags","summary":"","title":"comments"},{"content":"","date":"10 August 2020","permalink":"/tags/favicons/","section":"Tags","summary":"","title":"favicons"},{"content":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website. For those use-cases, Blowfish allows users to extend the list of authors using the multiple authors feature.\nTo keep everything backwards compatible, this feature only allows the definition of extra authors and does not change in any way the previous author functionality which is used via config files.\nCreate Authors # The first step to create new authors is to set up a new folder in ./data/authors. Then you can simply add new json files inside, one for each new author. The name of the file will be the key for that author when referencing it in your articles.\nAs an example, let’s create a file called nunocoracao.json within ./data/authors. The contents of the file should be similar to the ones below. name, image, bio, and social are the 4 parameters supported right for authors. They mimic the configurations available for the default author in the config files.\nNote: the key in the social object will be used to fetch one of the theme’s icons, feel free to use any of the icons available in your setup.\n{ \u0026#34;name\u0026#34;: \u0026#34;Nuno Coração\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/nuno_avatar.jpg\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;Theme Creator\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/nunocoracao\u0026#34; }, { \u0026#34;twitter\u0026#34;: \u0026#34;https://twitter.com/nunocoracao\u0026#34; }, { \u0026#34;instagram\u0026#34;: \u0026#34;https://instagram.com/nunocoracao\u0026#34; }, { \u0026#34;medium\u0026#34;: \u0026#34;https://medium.com/@nunocoracao\u0026#34; }, { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/nunocoracao\u0026#34; }, { \u0026#34;goodreads\u0026#34;: \u0026#34;http://goodreads.com/nunocoracao\u0026#34; }, { \u0026#34;keybase\u0026#34;: \u0026#34;https://keybase.io/nunocoracao\u0026#34; }, { \u0026#34;reddit\u0026#34;: \u0026#34;https://reddit.com/user/nunoheart\u0026#34; } ] } Reference Authors in Articles # Now that you created one author, the next step is to reference it in one or more articles. In the example below, we reference the author created in the previous step using its key.\nThis will render an extra author using the data provided in the json file. This feature does not change in any way the default author configured for the overall site, and therefore, you can control both separately. Using the showAuthor parameter, you can configure whether to show the default author, that is the normal use-case for a single author blog. The new authors front-matter parameter allows you to define authors specifically to an article, and they will be rendered independently of the configurations for the default site author.\n--- title: \u0026#34;Multiple Authors\u0026#34; date: 2020-08-10 draft: false description: \u0026#34;Configure multiple authors for your articles.\u0026#34; slug: \u0026#34;multi-author\u0026#34; tags: [\u0026#34;authors\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;docs\u0026#34;] showAuthor: true authors: - \u0026#34;nunocoracao\u0026#34; showAuthorsBadges : false --- In the example, which matches the markdown of the current page, both the default author and the new one will be displayed. You can scroll now to see the outcome.\nCreate the Authors Taxonomy # To get lists of articles for each of your authors you can configure the authors taxonomy, which opens up some more configurations that might be interesting. This is an optional step in the process that is not required to display the authors in your articles.\nFirst step is to configure the authors taxonomy in your config.toml file, like in the example below. Even though tag and category are defined by default with Hugo, once you add a specific taxonomies section you need to add them again otherwise the site will not process them.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; And that’s just about it. Now you will have pages that reference your authors and, for each, show the respective list of articles where they participate. You can also use the article.showAuthorsBadges on the config file, or showAuthorsBadges on each article to chose whether to display the authors taxonomy as badges in each post item. As an example, this doc is configured to not display authors but if you look at the sample referenced below you will see the authors displayed as badges.\nLastly, you can add more detail to each author page so that it displays a little bio, links, or whatever information fits your use-case. To achieve that, create a folder with the key to each author inside ./content/authors and inside each folder place a _index.md file. For the example above, we would end up with a .content/authors/nunocoracao/_index.md file. Inside, you can configure the actual name of the author and the contents of their page. Authors in this documentation website are configured like this, so you can have a look by playing around with the site.\n--- title: \u0026#34;Nuno Coração\u0026#34; --- Nuno\u0026#39;s awesome dummy bio. Sample # This sample sample below shows an example where the default site author is turned off and the article has multiple authors.\nMultiple Authors 1 min\u0026middot; 0 \u0026middot; 0 Nuno Coração ,\u0026nbsp; Dummy Second Author authors sample ","date":"10 August 2020","permalink":"/docs/multi-author/","section":"Documentation","summary":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website. For those use-cases, Blowfish allows users to extend the list of authors using the multiple authors feature.","title":"Multiple Authors"},{"content":"","date":"10 August 2020","permalink":"/tags/partials/","section":"Tags","summary":"","title":"partials"},{"content":" Analytics # Blowfish provides built-in support for Fathom Analytics and Google Analytics. Fathom is a paid alternative to Google Analytics that respects user privacy.\nFathom Analytics # To enable Fathom Analytics support, simply provide your Fathom site code in the config/_default/params.toml file. If you also use the custom domain feature of Fathom and would like to serve their script from your domain, you can also additionally provide the domain configuration value. If you don\u0026rsquo;t provide a domain value, the script will load directly from Fathom DNS.\n# config/_default/params.toml [fathomAnalytics] site = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Google Analytics # Google Analytics support is provided through the internal Hugo partial. Simply provide the googleAnalytics key in the config/_default/config.toml file and the script will be added automatically.\nBoth version 3 (analytics.js) and version 4 (gtag.js) are supported, based on the configuration value provided:\n# config/_default/config.toml # version 3 googleAnalytics = \u0026#34;UA-PROPERTY_ID\u0026#34; # version 4 googleAnalytics = \u0026#34;G-MEASUREMENT_ID\u0026#34; Custom analytics providers # If you wish to use a different analytics provider on your website you can also override the analytics partial and provide your own script. Simply create the file layouts/partials/analytics.html in your project and it will automatically include it in the \u0026lt;head\u0026gt; of the website.\nComments # To add comments to your articles, Blowfish includes support for a comments partial that is included at the base of each article page. Simply provide a layouts/partials/comments.html which contains the code required to display your chosen comments.\nYou can use either the built-in Hugo Disqus template, or provide your own custom code. Refer to the Hugo docs for further information.\nOnce the partial has been provided, finer control over where comments are displayed is then managed using the showComments parameter. This value can be set at the theme level in the params.toml config file, or on a per-article basis by including it in the front matter. The parameter defaults to false so it must be set to true in one of these locations in order for comments to be displayed.\nFavicons # Blowfish provides a default set of blank favicons to get started but you can provide your own assets to override them. The easiest way to obtain new favicon assets is to generate them using a third-party provider like favicon.io.\nIcon assets should be placed directly in the static/ folder of your website and named as per the listing below. If you use favicon.io, these will be the filenames that are automatically generated for you, but you can provide your own assets if you wish.\nstatic/ ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest Alternatively, you can also completely override the default favicon behaviour and provide your own favicon HTML tags and assets. Simply provide a layouts/partials/favicons.html file in your project and this will be injected into the site \u0026lt;head\u0026gt; in place of the default assets.\nIcon # Similar to the icon shortcode, you can include icons in your own templates and partials by using Blowfish\u0026rsquo;s icon.html partial. The partial takes one parameter which is the name of the icon to be included.\nExample:\n{{ partial \u0026#34;icon.html\u0026#34; \u0026#34;github\u0026#34; }} Icons are populated using Hugo pipelines which makes them very flexible. Blowfish includes a number of built-in icons for social, links and other purposes. Check the icon samples page for a full list of supported icons.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the partial by using the SVG filename without the .svg extension.\nIcons can also be used in article content by calling the icon shortcode.\nExtensions # Blowfish also provides for a number of extension partials that allow for expanding upon base functionality.\nArticle link # If you wish to insert additional code after article links, create a layouts/partials/extend-article-link.html file. This is especially powerful when combined with the badge shortcode which can be used to highlight metadata for certain articles.\nHead and Footer # The theme allows for inserting additional code directly into the \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; sections of the template. These can be useful for providing scripts or other logic that isn\u0026rsquo;t part of the theme.\nSimply create either layouts/partials/extend-head.html or layouts/partials/extend-footer.html and these will automatically be included in your website build. Both partials are injected as the last items in \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; so they can be used to override theme defaults.\n","date":"10 August 2020","permalink":"/docs/partials/","section":"Documentation","summary":"Analytics # Blowfish provides built-in support for Fathom Analytics and Google Analytics. Fathom is a paid alternative to Google Analytics that respects user privacy.\nFathom Analytics # To enable Fathom Analytics support, simply provide your Fathom site code in the config/_default/params.","title":"Partials"},{"content":"","date":"10 August 2020","permalink":"/tags/privacy/","section":"Tags","summary":"","title":"privacy"},{"content":"","date":"9 August 2020","permalink":"/tags/content/","section":"Tags","summary":"","title":"content"},{"content":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish. This page is designed to pull everything together and offer some worked examples that you might like to use in your Hugo project.\nTip: If you\u0026rsquo;re new to Hugo, be sure to check out the official docs to learn more about the concept of page bundles and resources. The examples on this page can all be adapted to different scenarios but hopefully give you some ideas about how to approach formatting a particular content item for your individual project.\nBranch pages # Branch page bundles in Hugo cover items like the homepage, section listings, and taxonomy pages. The important thing to remember about branch bundles is that the filename for this content type is _index.md.\nBlowfish will honour the front matter parameters specified in branch pages and these will override the default settings for that particular page. For example, setting the title parameter in a branch page will allow overriding the page title.\nHomepage # Layout: layouts/index.html Content: content/_index.md The homepage in Blowfish is special in that it\u0026rsquo;s overarching design is controlled by the homepage layout config parameter. You can learn more about this in the Homepage Layout section.\nIf you want to add custom content to this page, you simply need to create a content/_index.md file. Anything in this file will then be included in your homepage.\nExample:\n--- title: \u0026#34;Welcome to Blowfish!\u0026#34; description: \u0026#34;This is a demo of adding content to the homepage.\u0026#34; --- Welcome to my website! I\u0026#39;m really happy you stopped by. This example sets a custom title and adds some additional text to the body of the page. Any Markdown formatted text is acceptable, including shortcodes, images and links.\nList pages # Layout: layouts/_default/list.html Content: content/../_index.md List pages group all the pages within into a section and provide a way for visitors to reach each page. A blog or portfolio are examples of a list page as they group together posts or projects.\nCreating a list page is as simple as making a sub-directory in the content folder. For example, to create a \u0026ldquo;Projects\u0026rdquo; section, you would create content/projects/. Then create a Markdown file for each of your projects.\nA list page will be generated by default, however to customise the content, you should also create an _index.md page in this new directory.\n. └── content └── projects ├── _index.md # /projects ├── first-project.md # /projects/first-project └── another-project ├── index.md # /projects/another-project └── project.jpg Hugo will generate URLs for the pages in your projects folder accordingly.\nJust like the homepage, content in the _index.md file will be output into the generated list index. Blowfish will then list any pages in this section below the content.\nExample:\n--- title: \u0026#34;Projects\u0026#34; description: \u0026#34;Learn about some of my projects.\u0026#34; cascade: showReadingTime: false --- This section contains all my current projects. In this example, the special cascade parameter is being used to hide the reading time on any sub-pages within this section. By doing this, any project pages will not have their reading time showing. This is a great way to override default theme parameters for an entire section without having to include them in every individual page.\nThe samples section of this site is an example of a list page.\nTaxonomy pages # List layout: layouts/_default/taxonomy.html Term layout: layouts/_default/term.html Content: content/../_index.md Taxonomy pages come in two forms - taxonomy lists and taxonomy terms. Lists display a listing of each of the terms within a given taxonomy, while terms display a list of pages that are related to a given term.\nThe terminology can get a little confusing so let\u0026rsquo;s explore an example using a taxonomy named animals.\nFirstly, to use taxonomies in Hugo, they have to be configured. This is done by creating a config file at config/_default/taxonomies.toml and defining the taxonomy name.\n# config/_default/taxonomies.toml animal = \u0026#34;animals\u0026#34; Hugo expects taxonomies to be listed using their singular and plural forms, so we add the singular animal equals the plural animals to create our example taxonomy.\nNow that our animals taxonomy exists, it needs to be added to individual content items. It\u0026rsquo;s as simple as inserting it into the front matter:\n--- title: \u0026#34;Into the Lion\u0026#39;s Den\u0026#34; description: \u0026#34;This week we\u0026#39;re learning about lions.\u0026#34; animals: [\u0026#34;lion\u0026#34;, \u0026#34;cat\u0026#34;] --- This has now created two terms within our animals taxonomy - lion and cat.\nAlthough it\u0026rsquo;s not obvious at this point, Hugo will now be generating list and term pages for this new taxonomy. By default the listing can be accessed at /animals/ and the term pages can be found at /animals/lion/ and /animals/cat/.\nThe list page will list all the terms contained within the taxonomy. In this example, navigating to /animals/ will show a page that has links for \u0026ldquo;lion\u0026rdquo; and \u0026ldquo;cat\u0026rdquo; which take visitors to the individual term pages.\nThe term pages will list all the pages contained within that term. These term lists are essentially the same as normal list pages and behave in much the same way.\nIn order to add custom content to taxonomy pages, simply create _index.md files in the content folder using the taxonomy name as the sub-directory name.\n. └── content └── animals ├── _index.md # /animals └── lion └── _index.md # /animals/lion Anything in these content files will now be placed onto the generated taxonomy pages. As with other content, the front matter variables can be used to override defaults. In this way you could have a tag named lion but override the title to be \u0026ldquo;Lion\u0026rdquo;.\nTo see how this looks in reality, check out the tags taxonomy listing on this site.\nLeaf pages # Layout: layouts/_default/single.html Content (standalone): content/../page-name.md Content (bundled): content/../page-name/index.md Leaf pages in Hugo are basically standard content pages. They are defined as pages that don\u0026rsquo;t contain any sub-pages. These could be things like an about page, or an individual blog post that lives in the blog section of the website.\nThe most important thing to remember about leaf pages is that unlike branch pages, leaf pages should be named index.md without an underscore. Leaf pages are also special in that they can be grouped together at the top level of the section and named with a unique name.\n. └── content └── blog ├── first-post.md # /blog/first-post ├── second-post.md # /blog/second-post └── third-post ├── index.md # /blog/third-post └── image.jpg When including assets in a page, like an image, a page bundle should be used. Page bundles are created using a sub-directory with an index.md file. Grouping the assets with the content in its own directory is important as many of the shortcodes and other theme logic assumes that resources are bundled alongside pages.\nExample:\n--- title: \u0026#34;My First Blog Post\u0026#34; date: 2022-01-25 description: \u0026#34;Welcome to my blog!\u0026#34; summary: \u0026#34;Learn more about me and why I am starting this blog.\u0026#34; tags: [\u0026#34;welcome\u0026#34;, \u0026#34;new\u0026#34;, \u0026#34;about\u0026#34;, \u0026#34;first\u0026#34;] --- _This_ is the content of my blog post. Leaf pages have a wide variety of front matter parameters that can be used to customise how they are displayed.\nExternal links # Blowfish has a special feature that allows links to external pages to appear alongside articles in the article listings. This is useful if you have content on third party websites like Medium, or research papers that you\u0026rsquo;d like to link to, without replicating the content in your Hugo site.\nIn order to create an external link article, some special front matter needs to be set:\n--- title: \u0026#34;My Medium post\u0026#34; date: 2022-01-25 externalUrl: \u0026#34;https://medium.com/\u0026#34; summary: \u0026#34;I wrote a post on Medium.\u0026#34; showReadingTime: false _build: render: \u0026#34;false\u0026#34; list: \u0026#34;local\u0026#34; --- Along with the normal front matter parameters like title and summary, the externalUrl parameter is used to tell Blowfish that this is not an ordinary article. The URL provided here will be where visitors are directed when they select this article.\nAdditionally, we use a special Hugo front matter parameter _build to prevent a normal page for this content being generated - there\u0026rsquo;s no point generating a page since we\u0026rsquo;re linking to an external URL!\nThe theme includes an archetype to make generating these external link articles simple. Just specify -k external when making new content.\nhugo new -k external posts/my-post.md Simple pages # Layout: layouts/_default/simple.html Front Matter: layout: \u0026quot;simple\u0026quot; Blowfish also includes a special layout for simple pages. The simple layout is a full-width template that just places Markdown content into the page without any special theme features.\nThe only features available in the simple layout are breadcrumbs and sharing links. However, the behaviour of these can still be controlled using the normal page front matter variables.\nTo enable the simple layout on a particular page, add the layout front matter variable with a value of \u0026quot;simple\u0026quot;:\n--- title: \u0026#34;My landing page\u0026#34; date: 2022-03-08 layout: \u0026#34;simple\u0026#34; --- This page content is now full-width. Custom layouts # One of the benefits of Hugo is that it makes it easy to create custom layouts for the whole site, individual sections or pages.\nLayouts follow all the normal Hugo templating rules and more information is available in the official Hugo docs.\nOverriding default layouts # Each of the content types discussed above lists the layout file that is used to generate each type of page. If this file is created in your local project it will override the theme template and thus can be used to customise the default style of the website.\nFor example, creating a layouts/_default/single.html file will allow the layout of leaf pages to be completely customised.\nCustom section layouts # It is also simple to create custom layouts for individual content sections. This is useful when you want to make a section that lists a certain type of content using a particular style.\nLet\u0026rsquo;s step through an example that creates a custom \u0026ldquo;Projects\u0026rdquo; page that lists projects using a special layout.\nIn order to do this, structure your content using the normal Hugo content rules and create a section for your projects. Additionally, create a new layout for the projects section by using the same directory name as the content and adding a list.html file.\n. └── content │ └── projects │ ├── _index.md │ ├── first-project.md │ └── second-project.md └── layouts └── projects └── list.html This list.html file will now override the default list template, but only for the projects section. Before we look at this file, lets first look at the individual project files.\n--- title: \u0026#34;Blowfish\u0026#34; date: 2021-08-11 icon: \u0026#34;github\u0026#34; description: \u0026#34;A theme for Hugo built with Tailwind CSS.\u0026#34; topics: [\u0026#34;Hugo\u0026#34;, \u0026#34;Web\u0026#34;, \u0026#34;Tailwind\u0026#34;] externalUrl: \u0026#34;https://github.com/nunocoracao/blowfish/\u0026#34; --- In this example we are assigning some metadata for each project that we can then use in our list template. There\u0026rsquo;s no page content, but there\u0026rsquo;s nothing stopping you from including it. It\u0026rsquo;s your own custom template after all!\nWith the projects defined, now we can create a list template that outputs the details of each project.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;mt-8\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;article class=\u0026#34;pb-6\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;flex\u0026#34; href=\u0026#34;{{ .Params.externalUrl }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mr-3 text-3xl text-neutral-300\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;relative inline-block align-text-bottom\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Params.icon }} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3 class=\u0026#34;flex text-xl font-semibold\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-neutral-400\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} Although this is quite a straightforward example, you can see that it steps through each of the pages in this section (ie. each project), and then outputs HTML links to each project alongside an icon. The metadata in the front matter for each project is used to determine which information is displayed.\nKeep in mind that you\u0026rsquo;ll need to ensure the relevant styles and classes are available, which may require the Tailwind CSS to be recompiled. This is discussed in more detail in the Advanced Customisation section.\nWhen making custom templates like this one, it\u0026rsquo;s always easiest to take a look at how the default Blowfish template works and then use that as a guide. Remember, the Hugo docs are a great resource to learn more about creating templates too.\n","date":"9 August 2020","permalink":"/docs/content-examples/","section":"Documentation","summary":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish. This page is designed to pull everything together and offer some worked examples that you might like to use in your Hugo project.","title":"Content Examples"},{"content":"","date":"9 August 2020","permalink":"/tags/example/","section":"Tags","summary":"","title":"example"},{"content":"","date":"9 August 2020","permalink":"/tags/series/","section":"Tags","summary":"","title":"series"},{"content":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;. Placing an article under a series will display the rest of the series articles in each single page and provide a quick way to navigate amongst them. You can see an example of this above.\nCreate Taxonomy # The first step to enable series is to create the series taxonomy. For doing this just add the series taxonomy to your taxonomy list in the config.toml.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; Mark Articles # Then you just need to mark each article using the series parameter and the series_order. The series parameter will be the id and name of the series you are placing the article into (even though the variable is an array we recommend keeping each article to a single series.). And the series_order defines the order of that article within the series. In the example below the article is number 11 in the Documentation series.\nseries: [\u0026#34;Documentation\u0026#34;] series_order: 11 Series Behavior # Marking an article as part of a series will automatically display the series module as you see in this page for example. You can choose whether that module starts opened or not using the article.seriesOpened global variable in params.toml or the front-matter parameter seriesOpened to specify an override at the article level.\n","date":"9 August 2020","permalink":"/docs/series/","section":"Documentation","summary":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;. Placing an article under a series will display the rest of the series articles in each single page and provide a quick way to navigate amongst them.","title":"Series"},{"content":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing. 🚀\nYou can also use these content pages to define Hugo metadata like titles and descriptions that will be used for SEO and other purposes.\n","date":"8 August 2020","permalink":"/tags/advanced/","section":"Tags","summary":"This is the advanced tag. Just like other listing pages in Blowfish, you can add custom content to individual taxonomy terms and it will be displayed at the top of the term listing.","title":"Advanced"},{"content":"There are many ways you can make advanced changes to Blowfish. Read below to learn more about what can be customised and the best way of achieving your desired result.\nIf you need further advice, post your questions on GitHub Discussions.\nHugo project structure # Before leaping into it, first a quick note about Hugo project structure and best practices for managing your content and theme customisations.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project\u0026rsquo;s sub-directories, not in the themes directory itself. Blowfish is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overriden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Blowfish, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nChange image optimization settings # Hugo has various builtin methods to resize, crop and optimize images.\nAs an example - in layouts/partials/article-link/card.html, you have the following code:\n{{ with .Resize \u0026#34;600x\u0026#34; }} \u0026lt;div class=\u0026#34;w-full thumbnail_card nozoom\u0026#34; style=\u0026#34;background-image:url({{ .RelPermalink }});\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ end }} The default behavior of Hugo here is to resize the image to 600px keeping the ratio.\nIt is worth noting here that default image configurations such as anchor point can also be set in your site configuration as well as in the template itself.\nSee the Hugo docs on image processing for more info.\nColour schemes # Blowfish ships with a number of colour schemes out of the box. To change the basic colour scheme, you can set the colorScheme theme parameter. Refer to the Getting Started section to learn more about the built-in schemes.\nIn addition to the default schemes, you can also create your own and re-style the entire website to your liking. Schemes are created by by placing a \u0026lt;scheme-name\u0026gt;.css file in the assets/css/schemes/ folder. Once the file is created, simply refer to it by name in the theme configuration.\nNote: generating these files manually can be hard, I\u0026rsquo;ve built a nodejs terminal tool to help with that, Fugu. In a nutshell, you pass the main three hex values of your color pallette and the program will output a css file that can be imported directly into Blowfish. Blowfish defines a three-colour palette that is used throughout the theme. The three colours are defined as neutral, primary and secondary variants, each containing ten shades of colour.\nDue to the way Tailwind CSS 3.0 calculates colour values with opacity, the colours specified in the scheme need to conform to a particular format by providing the red, green and blue colour values.\n:root { --color-primary-500: 139, 92, 246; } This example defines a CSS variable for the primary-500 colour with a red value of 139, green value of 92 and blue value of 246.\nUse one of the existing theme stylesheets as a template. You are free to define your own colours, but for some inspiration, check out the official Tailwind colour palette reference.\nOverriding the stylesheet # Sometimes you need to add a custom style to style your own HTML elements. Blowfish provides for this scenario by allowing you to override the default styles in your own CSS stylesheet. Simply create a custom.css file in your project\u0026rsquo;s assets/css/ folder.\nThe custom.css file will be minified by Hugo and loaded automatically after all the other theme styles which means anything in your custom file will take precedence over the defaults.\nUsing additional fonts # Blowfish allows you to easily change the font for your site. After creating a custom.css file in your project\u0026rsquo;s assets/css/ folder, place you font file inside a fonts folder withing the static root folder.\n. ├── assets │ └── css │ └── custom.css ... └─── static └── fonts └─── font.ttf This makes the font available to the website. Now, the font can just import it in your custom.css and replaced wherever you see fit. The example below shows what replacing the font for the entire html would look like.\n@font-face { font-family: font; src: url(\u0026#39;/fonts/font.ttf\u0026#39;); } html { font-family: font; } Adjusting the font size # Changing the font size of your website is one example of overriding the default stylesheet. Blowfish makes this simple as it uses scaled font sizes throughout the theme which are derived from the base HTML font size. By default, Tailwind sets the default size to 12pt, but it can be changed to whatever value you prefer.\nCreate a custom.css file using the instructions above and add the following CSS declaration:\n/* Increase the default font size */ html { font-size: 13pt; } Simply by changing this one value, all the font sizes on your website will be adjusted to match this new size. Therefore, to increase the overall font sizes used, make the value greater than 12pt. Similarly, to decrease the font sizes, make the value less than 12pt.\nBuilding the theme CSS from source # If you\u0026rsquo;d like to make a major change, you can take advantage of Tailwind CSS\u0026rsquo;s JIT compiler and rebuild the entire theme CSS from scratch. This is useful if you want to adjust the Tailwind configuration or add extra Tailwind classes to the main stylesheet.\nNote: Building the theme manually is intended for advanced users. Let\u0026rsquo;s step through how building the Tailwind CSS works.\nTailwind configuration # In order to generate a CSS file that only contains the Tailwind classes that are actually being used the JIT compiler needs to scan through all the HTML templates and Markdown content files to check which styles are present in the markup. The compiler does this by looking at the tailwind.config.js file which is included in the root of the theme directory:\n// themes/blowfish/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/blowfish/layouts/**/*.html\u0026#34;, \u0026#34;./themes/blowfish/content/**/*.{html,md}\u0026#34;, ], // and more... }; This default configuration has been included with these content paths so that you can easily generate your own CSS file without needing to modify it, provided you follow a particular project structure. Namely, you have to include Blowfish in your project as a subdirectory at themes/blowfish/. This means you cannot easily use Hugo Modules to install the theme and you must go down either the git submodule (recommended) or manual install routes. The Installation docs explain how to install the theme using either of these methods.\nProject structure # In order to take advantage of the default configuration, your project should look something like this\u0026hellip;\n. ├── assets │ └── css │ └── compiled │ └── main.css # this is the file we will generate ├── config # site config │ └── _default ├── content # site content │ ├── _index.md │ ├── projects │ │ └── _index.md │ └── blog │ └── _index.md ├── layouts # custom layouts for your site │ ├── partials │ │ └── extend-article-link/simple.html │ ├── projects │ │ └── list.html │ └── shortcodes │ └── disclaimer.html └── themes └── blowfish # git submodule or manual theme install This example structure adds a new projects content type with its own custom layout along with a custom shortcode and extended partial. Provided the project follows this structure, all that\u0026rsquo;s required is to recompile the main.css file.\nInstall dependencies # In order for this to work you\u0026rsquo;ll need to change into the themes/blowfish/ directory and install the project dependencies. You\u0026rsquo;ll need npm on your local machine for this step.\ncd themes/blowfish npm install Run the Tailwind compiler # With the dependencies installed all that\u0026rsquo;s left is to use Tailwind CLI to invoke the JIT compiler. Navigate back to the root of your Hugo project and issue the following command:\ncd ../.. ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit It\u0026rsquo;s a bit of an ugly command due to the paths involved but essentially you\u0026rsquo;re calling Tailwind CLI and passing it the location of the Tailwind config file (the one we looked at above), where to find the theme\u0026rsquo;s main.css file and then where you want the compiled CSS file to be placed (it\u0026rsquo;s going into the assets/css/compiled/ folder of your Hugo project).\nThe config file will automatically inspect all the content and layouts in your project as well as all those in the theme and build a new CSS file that contains all the CSS required for your website. Due to the way Hugo handles file hierarchy, this file in your project will now automatically override the one that comes with the theme.\nEach time you make a change to your layouts and need new Tailwind CSS styles, you can simply re-run the command and generate the new CSS file. You can also add -w to the end of the command to run the JIT compiler in watch mode.\nMake a build script # To fully complete this solution, you can simplify this whole process by adding aliases for these commands, or do what I do and add a package.json to the root of your project which contains the necessary scripts\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } Now when you want to work on designing your site, you can invoke npm run dev and the compiler will run in watch mode. When you\u0026rsquo;re ready to deploy, run npm run build and you\u0026rsquo;ll get a clean Tailwind CSS build.\n🙋‍♀️ If you need help, feel free to ask a question on GitHub Discussions.\n","date":"8 August 2020","permalink":"/docs/advanced-customisation/","section":"Documentation","summary":"There are many ways you can make advanced changes to Blowfish. Read below to learn more about what can be customised and the best way of achieving your desired result.","title":"Advanced Customisation"},{"content":"","date":"8 August 2020","permalink":"/tags/css/","section":"Tags","summary":"","title":"css"},{"content":"","date":"7 August 2020","permalink":"/tags/deployment/","section":"Tags","summary":"","title":"deployment"},{"content":"","date":"7 August 2020","permalink":"/tags/github/","section":"Tags","summary":"","title":"github"},{"content":"","date":"7 August 2020","permalink":"/tags/hosting/","section":"Tags","summary":"","title":"hosting"},{"content":"There are many ways to deploy your Hugo website built with Blowfish. The theme is designed to be flexible in almost any deployment scenario.\nBlowfish is built using relative URLs throughout the theme. This enables sites to easily be deployed to sub-folders and hosts like GitHub Pages. There\u0026rsquo;s usually no special configuration required for this to work as long as the baseURL parameter has been configured in the config.toml file.\nThe official Hugo Hosting and Deployment docs are the best place to learn how to deploy your site. The sections below contain some specific theme configuration details that can help you deploy smoothly with certain providers.\nChoose your provider:\nGitHub Pages Netlify Render Cloudflare Pages Shared hosting, VPS or private web server GitHub Pages # GitHub allows hosting on GitHub Pages using Actions. To enable this functionality, enable Pages on your repo and create a new Actions workflow to build and deploy your site.\nThe file needs to be in YAML format, placed within the .github/workflows/ directory of your GitHub repository and named with a .yml extension.\nImportant: Ensure you set the correct branch name under branches and in the deploy step if parameter to the source branch used in your project. # .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public Push the config file to GitHub and the action should automatically run. It may fail the first time and you\u0026rsquo;ll need to visit the Settings \u0026gt; Pages section of your GitHub repo to check the source is correct. It should be set to use the gh-pages branch.\nOnce the settings are configured, re-run the action and the site should build and deploy correctly. You can consult the actions log to check everything deployed successfully.\nNetlify # To deploy to Netlify, create a new continuous deployment site and link it to your source code. The build settings can be left blank in the Netlify UI. You will only need to configure the domain you\u0026rsquo;ll be using.\nThen in the root of your site repository, create a netlify.toml file:\n# netlify.toml [build] command = \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo --gc --minify -b $URL\u0026#34; publish = \u0026#34;public\u0026#34; [build.environment] NODE_ENV = \u0026#34;production\u0026#34; GO_VERSION = \u0026#34;1.16\u0026#34; TZ = \u0026#34;UTC\u0026#34; # Set to preferred timezone [context.production.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; This configuration assumes you are deploying Blowfish as a Hugo module. If you have installed the theme using another method, change the build command to simply hugo --gc --minify -b $URL.\nWhen you push the config file to your repo, Netlify should automatically deploy your site. You can check the deploy logs in the Netlify UI to check for any errors.\nRender # Deploying to Render is very straightforward and all configuration is via the Render UI.\nCreate a new Static Site and link it to your project\u0026rsquo;s code repository. Then simply configure the build command to be hugo --gc --minify and publish directory to be public.\nThe site will automatically build and deploy whenever you push a change to your repo.\nCloudflare Pages # Cloudflare offers the Pages service that can host Hugo blogs. It builds the site from a git repository and then hosts it on Cloudflare\u0026rsquo;s CDN. Follow their Hugo deployment guide to get started.\nThe Rocket Loader™ feature offered by Cloudflare tries to speed up rendering of web pages with JavaScript, but it breaks the appearance switcher in the theme. It can also cause an annoying light/dark screen flash when browsing your site due to scripts loading in the wrong order.\nThis problem can be fixed by disabling it:\nGo to the Cloudflare dashboard Click on your domain name in the list Click Optimization in the Speed section Scroll down to Rocket Loader™ and disable it Hugo sites built with Blowfish still load very quickly, even with this feature disabled.\nShared hosting, VPS or private web server # Using traditional web hosting, or deploying to your own web server, is as simple as building your Hugo site and transferring the files to your host.\nMake sure that the baseURL parameter in config.toml is set to the full URL to the root of your website (including any sub domains or sub-folders).\nThen build your site using hugo and copy the contents of the output directory to the root of your web server and you will be ready to go. By default, the output directory is named public.\nIf you need a hosting provider, check out Vultr or DigitalOcean. Signing up using these affiliate links will give you up to $100 in free credit so you can try the service.\n","date":"7 August 2020","permalink":"/docs/hosting-deployment/","section":"Documentation","summary":"There are many ways to deploy your Hugo website built with Blowfish. The theme is designed to be flexible in almost any deployment scenario.\nBlowfish is built using relative URLs throughout the theme.","title":"Hosting \u0026 Deployment"},{"content":"","date":"7 August 2020","permalink":"/tags/netlify/","section":"Tags","summary":"","title":"netlify"},{"content":"","date":"7 August 2020","permalink":"/tags/render/","section":"Tags","summary":"","title":"render"},{"content":"","date":"3 August 2020","permalink":"/tags/firebase/","section":"Tags","summary":"","title":"firebase"},{"content":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase. This will allow you to use the views feature across lists and posts.\nGo to Firebase website and create an account for free Create a new project Select analytics location Setup firebase in Blowfish by getting the variables for your project and setting them inside params.toml file. More details can be found in this page. You can find an example of the file Firebase will provide below, notice the parameters within the FirebaseConfig object. // Import the functions you need from the SDKs you need import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;; // TODO: Add SDKs for Firebase products that you want to use // https://firebase.google.com/docs/web/setup#available-libraries // Your web app\u0026#39;s Firebase configuration // For Firebase JS SDK v7.20.0 and later, measurementId is optional const firebaseConfig = { apiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;, authDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;, projectId: \u0026#34;blowfish-21fff\u0026#34;, storageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;, messagingSenderId: \u0026#34;60108104191\u0026#34;, appId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;, measurementId: \u0026#34;G-PEDMYR1V0K\u0026#34; }; // Initialize Firebase const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); Setup Firestore - Select Build and open Firestore. Create a new database and choose to start in production mode. Select server location and wait. Once that is started you need to configure the rules. Just copy and paste the file below and press publish. rules_version = \u0026#39;2\u0026#39;; service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write: if request.auth != null; } } } Enable anonymous authorization - Select Build and open Authentication. Select get started, click Anonymous and turn it on, save. Enjoy - you can now activate views and likes on Blowfish for all (or specific) articles. ","date":"3 August 2020","permalink":"/docs/firebase-views/","section":"Documentation","summary":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase. This will allow you to use the views feature across lists and posts.","title":"Firebase: Views \u0026 Likes"},{"content":"","date":"3 August 2020","permalink":"/tags/likes/","section":"Tags","summary":"","title":"likes"},{"content":"","date":"3 August 2020","permalink":"/tags/views/","section":"Tags","summary":"","title":"views"},{"content":"","date":"11 March 2019","permalink":"/tags/html/","section":"Tags","summary":"","title":"html"},{"content":"","date":"11 March 2019","permalink":"/tags/markdown/","section":"Tags","summary":"","title":"markdown"},{"content":"This article offers a sample of basic Markdown formatting that can be used in Blowfish, also it shows how some basic HTML elements are decorated.\nHeadings # The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 # H2 # H3 # H4 # H5 # H6 # Paragraph # Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes # The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution # Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution # Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables # Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables # Italics Bold Code italics bold code Code Blocks # Code block with backticks # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces # \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode # 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types # Ordered List # First item Second item Third item Unordered List # List item Another item And another item Nested list # Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark # GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk about nothing during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"11 March 2019","permalink":"/samples/markdown/","section":"Samples","summary":"\u003cp\u003eThis article offers a sample of basic Markdown formatting that can be used in Blowfish, also it shows how some basic HTML elements are decorated.\u003c/p\u003e","title":"Markdown"},{"content":"","date":"10 March 2019","permalink":"/tags/gist/","section":"Tags","summary":"","title":"gist"},{"content":"Hugo ships with several built-in shortcodes for rich content, along with a privacy config and a set of simple shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube # Below is an example using the built-in youtube shortcode.\nTwitter # This example uses the twitter_simple shortcode to output a Tweet. It requires two named parameters user and id.\n“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Alternatively, the tweet shortcode can be used to embed a fully marked up Twitter card.\nGist # The gist shortcode can be used to embed a GitHub Gist. It requires two unnamed parameters: the username and ID of the Gist.\nVimeo # The vimeo_simple shortcode will embed a Vimeo video.\n","date":"10 March 2019","permalink":"/samples/rich-content/","section":"Samples","summary":"This is an \u003cem\u003eexample\u003c/em\u003e of a \u003cstrong\u003erich\u003c/strong\u003e content summary.","title":"Rich Content"},{"content":"","date":"10 March 2019","permalink":"/tags/twitter/","section":"Tags","summary":"","title":"twitter"},{"content":"","date":"10 March 2019","permalink":"/tags/vimeo/","section":"Tags","summary":"","title":"vimeo"},{"content":"","date":"10 March 2019","permalink":"/tags/youtube/","section":"Tags","summary":"","title":"youtube"},{"content":"","date":"9 March 2019","permalink":"/tags/latin/","section":"Tags","summary":"","title":"latin"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt # The Van de Graaf Canon\nMane refeci capiebant unda mulcebat # Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"9 March 2019","permalink":"/samples/placeholder-text/","section":"Samples","summary":"\u003cp\u003eLorem est tota propiore conpellat pectoribus de pectora summo.\u003c/p\u003e","title":"Placeholder Text"},{"content":"","date":"9 March 2019","permalink":"/tags/text/","section":"Tags","summary":"","title":"text"},{"content":"","date":"8 March 2019","permalink":"/tags/katex/","section":"Tags","summary":"","title":"katex"},{"content":"KaTeX can be used to render mathematical notation within articles.\nBlowfish will only bundle the KaTeX assets into your project if you make use of mathematical notation. In order for this to work, simply include the katex shortcode within the article. Example below:\n{{\u0026lt; katex \u0026gt;}} Any KaTeX syntax on that page will then be automatically rendered. Use the online reference of supported TeX functions for the available syntax.\nInline notation # Inline notation can be generated by wrapping the expression in \\\\( and \\\\) delimiters.\nExample:\n% KaTeX inline notation Inline notation: \\\\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\\\) Inline notation: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\)\nBlock notation # Alternatively, block notation can be generated using $$ delimiters. This will output the expression in its own HTML block.\nExample:\n% KaTeX block notation $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"8 March 2019","permalink":"/samples/mathematical-notation/","section":"Samples","summary":"\u003cp\u003eKaTeX can be used to render mathematical notation within articles.\u003c/p\u003e","title":"Mathematical notation"},{"content":"","date":"8 March 2019","permalink":"/tags/maths/","section":"Tags","summary":"","title":"maths"},{"content":"","date":"6 March 2019","permalink":"/tags/chart/","section":"Tags","summary":"","title":"chart"},{"content":"Blowfish includes support for Chart.js using the chart shortcode. Simply wrap the chart markup within the shortcode. Blowfish automatically themes charts to match the configured colorScheme parameter, however the colours can be customised using normal Chart.js syntax.\nRefer to the chart shortcode docs for more details.\nThe examples below are a small selection taken from the official Chart.js docs. You can also view the page source on GitHub to see the markup.\nBar chart # Line chart # Doughnut chart # ","date":"6 March 2019","permalink":"/samples/charts/","section":"Samples","summary":"Blowfish includes Chart.js for powerful charts and data visualisations.","title":"Charts"},{"content":"","date":"6 March 2019","permalink":"/tags/diagram/","section":"Tags","summary":"","title":"diagram"},{"content":"Mermaid diagrams are supported in Blowfish using the mermaid shortcode. Simply wrap the diagram markup within the shortcode. Blowfish automatically themes Mermaid diagrams to match the configured colorScheme parameter.\nRefer to the mermaid shortcode docs for more details.\nThe examples below are a small selection taken from the official Mermaid docs. You can also view the page source on GitHub to see the markup.\nFlowchart # graph TD A[Christmas] --\u003e|Get money| B(Go shopping) B --\u003e C{Let me think} B --\u003e G[/Another/] C ==\u003e|One| D[Laptop] C --\u003e|Two| E[iPhone] C --\u003e|Three| F[Car] subgraph Section C D E F G end Sequence diagram # sequenceDiagram autonumber par Action 1 Alice-\u003e\u003eJohn: Hello John, how are you? and Action 2 Alice-\u003e\u003eBob: Hello Bob, how are you? end Alice-\u003e\u003e+John: Hello John, how are you? Alice-\u003e\u003e+John: John, can you hear me? John--\u003e\u003e-Alice: Hi Alice, I can hear you! Note right of John: John is perceptive John--\u003e\u003e-Alice: I feel great! loop Every minute John--\u003eAlice: Great! end Class diagram # classDiagram Animal \"1\" \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c--o Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } Entity relationship diagram # erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : \"liable for\" DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : \"ordered in\" ","date":"6 March 2019","permalink":"/samples/diagrams-flowcharts/","section":"Samples","summary":"It\u0026rsquo;s easy to add diagrams and flowcharts to articles using Mermaid.","title":"Diagrams and Flowcharts"},{"content":"","date":"6 March 2019","permalink":"/tags/graph/","section":"Tags","summary":"","title":"graph"},{"content":"","date":"5 March 2019","permalink":"/tags/emoji/","section":"Tags","summary":"","title":"emoji"},{"content":"Emoji is supported throughout Blowfish by default. Emoji can be used in titles, menu items and article content.\nNote: The rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack. Emoji replacements are automatic throughout Blowfish, so you can use shorthand codes in your content and front matter and they will be converted to their corresponding symbols at build time.\nExample: see_no_evil 🙈, hear_no_evil 🙉, speak_no_evil 🙊.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\n","date":"5 March 2019","permalink":"/samples/emoji/","section":"Samples","summary":"📖🏞️🧗🏽🐉🧙🏽‍♂️🧚🏽👸","title":"Emoji 🪂"},{"content":"Thank you for wanting to contribute to Blowfish\u0026rsquo;s community.\nHow to start? # This is a template article that will explain how to create a new article for Blowfish\u0026rsquo;s guide section.\nClone Blowfish # Clone this repo with the following command:\ngit clone https://github.com/nunocoracao/blowfish.git Setup your files # Copy and paste the entire folder where this .md file is.\nName it using the following convention YYYYMM-title, no white spaces are allowed.\nWrite your guide # Write your guide :)\nUse the img folder to place your images and use them:\nImage caption Open a PR # Open a PR and thanks in advance for your contribution.\n","date":"22 December 1987","permalink":"/guides/template/","section":"Recipes","summary":"Thank you for wanting to contribute to Blowfish\u0026rsquo;s community.\nHow to start? # This is a template article that will explain how to create a new article for Blowfish\u0026rsquo;s guide section.","title":"Recipe Template"},{"content":" Recipes, guides, and tutorials for Blowfish Blowfish user? To add your guide to this list, check the template.\nThis section contains guides for a variety of scnearios on how to configure your theme. If you\u0026rsquo;re new, check out the Installation guide to begin or visit the Samples section to see what Blowfish can do.\n","date":"22 December 1987","permalink":"/guides/","section":"Recipes","summary":"Recipes, guides, and tutorials for Blowfish Blowfish user? To add your guide to this list, check the template.\nThis section contains guides for a variety of scnearios on how to configure your theme.","title":"Recipes"},{"content":"","date":"22 December 1987","permalink":"/tags/template/","section":"Tags","summary":"","title":"template"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" Projects, thoughts, essays, and all related to the field of data analytics and data science are kept here. Post below you can browse the collection that is my data portfolio. If you have any questions or would like to initiate a conversation on anything you find here, I would enjoy it if you would contact me.\n","date":"1 January 0001","permalink":"/data/","section":"Data Analytics and Science Portfolio","summary":"Projects, thoughts, essays, and all related to the field of data analytics and data science are kept here. Post below you can browse the collection that is my data portfolio.","title":"Data Analytics and Science Portfolio"},{"content":" Here are a collection of iOS mobile applications, projects, and ideas. I maintain this page mainly as a portfolio for my iOS mobile application portfolio. Here you can find completed applications, some available in the Apple App Store. You can also find projects that showcase a particular feature or concept that I may be saving for reference to use later or simply because I wanted to create it out of interest.\n","date":"1 January 0001","permalink":"/ios/","section":"iOS Portfolio","summary":"Here are a collection of iOS mobile applications, projects, and ideas. I maintain this page mainly as a portfolio for my iOS mobile application portfolio. Here you can find completed applications, some available in the Apple App Store.","title":"iOS Portfolio"},{"content":" Welcome to my anthology of photography and related content Here you can find events and activities I photographed or filmed. A collection of techniques and experimental efforts in the world of composition and editing. Alongside my meditations on the medium of still and motion film.\n","date":"1 January 0001","permalink":"/photography/","section":"Photography","summary":"Welcome to my anthology of photography and related content Here you can find events and activities I photographed or filmed. A collection of techniques and experimental efforts in the world of composition and editing.","title":"Photography"}]